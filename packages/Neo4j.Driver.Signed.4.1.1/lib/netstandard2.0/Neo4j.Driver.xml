<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Neo4j.Driver</name>
    </assembly>
    <members>
        <member name="T:Neo4j.Driver.AccessMode">
            <summary>
            Used by driver to route a cypher query to a write server or a read server.
            </summary>
        </member>
        <member name="F:Neo4j.Driver.AccessMode.Read">
            <summary>
            Requires cypher query to be carried out on a read server
            </summary>
        </member>
        <member name="F:Neo4j.Driver.AccessMode.Write">
            <summary>
            Requires cypher query to be executed on a write server
            </summary>
        </member>
        <member name="T:Neo4j.Driver.AuthTokens">
            <summary>
                This provides methods to create <see cref="T:Neo4j.Driver.IAuthToken"/>s for various authentication schemes supported by this driver. 
                The scheme used must be also supported by the Neo4j instance you are connecting to.
            </summary>
            <remarks>
                <see cref="M:Neo4j.Driver.GraphDatabase.Driver(System.String,Neo4j.Driver.IAuthToken,System.Action{Neo4j.Driver.ConfigBuilder})" />
            </remarks>
        </member>
        <member name="P:Neo4j.Driver.AuthTokens.None">
            <summary>
                Gets an authentication token that can be used to connect to Neo4j instances with auth disabled.
                This will only work if authentication is disabled on the Neo4j Instance we are connecting to.
            </summary>
            <remarks>
                <see cref="M:Neo4j.Driver.GraphDatabase.Driver(System.String,Neo4j.Driver.IAuthToken,System.Action{Neo4j.Driver.ConfigBuilder})" />
            </remarks>
        </member>
        <member name="M:Neo4j.Driver.AuthTokens.Basic(System.String,System.String)">
            <summary>
                The basic authentication scheme, using a username and a password.
            </summary>
            <param name="username">This is the "principal", identifying who this token represents.</param>
            <param name="password">This is the "credential", proving the identity of the user.</param>
            <returns>An authentication token that can be used to connect to Neo4j.</returns>
            <remarks>
                <see cref="M:Neo4j.Driver.GraphDatabase.Driver(System.String,Neo4j.Driver.IAuthToken,System.Action{Neo4j.Driver.ConfigBuilder})" />
            </remarks>
        </member>
        <member name="M:Neo4j.Driver.AuthTokens.Basic(System.String,System.String,System.String)">
            <summary>
                The basic authentication scheme, using a username and a password.
            </summary>
            <param name="username">This is the "principal", identifying who this token represents.</param>
            <param name="password">This is the "credential", proving the identity of the user.</param>
            <param name="realm">This is the "realm", specifies the authentication provider. If none is given, default to be decided by the server. </param>
            <returns>An authentication token that can be used to connect to Neo4j.</returns>
            <remarks>
                <see cref="M:Neo4j.Driver.GraphDatabase.Driver(System.String,Neo4j.Driver.IAuthToken,System.Action{Neo4j.Driver.ConfigBuilder})" />
            </remarks>
        </member>
        <member name="M:Neo4j.Driver.AuthTokens.Kerberos(System.String)">
            <summary>
            The kerberos authentication scheme, using a base64 encoded ticket. 
            </summary>
            <param name="base64EncodedTicket">A base64 encoded service ticket.</param>
            <returns>an authentication token that can be used to connect to Neo4j.</returns>
            <remarks>
                <see cref="M:Neo4j.Driver.GraphDatabase.Driver(System.String,Neo4j.Driver.IAuthToken,System.Action{Neo4j.Driver.ConfigBuilder})" />
            </remarks>
        </member>
        <member name="M:Neo4j.Driver.AuthTokens.Custom(System.String,System.String,System.String,System.String)">
            <summary>
                Gets an authentication token that can be used to connect to Neo4j instances with auth disabled.
                This will only work if authentication is disabled on the Neo4j Instance we are connecting to.
            </summary>
            <remarks>
                <see cref="M:Neo4j.Driver.GraphDatabase.Driver(System.String,Neo4j.Driver.IAuthToken,System.Action{Neo4j.Driver.ConfigBuilder})" />
            </remarks>
            <param name="principal">This is used to identify who this token represents.</param>
            <param name="credentials">This is credentials authenticating the principal.</param>
            <param name="realm">This is the "realm", specifies the authentication provider.</param>
            <param name="scheme">This is the authentication scheme, specifying what kind of authentication that should be used.</param>
            <returns>An authentication token that can be used to connect to Neo4j.</returns>
        </member>
        <member name="M:Neo4j.Driver.AuthTokens.Custom(System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
                Gets an authentication token that can be used to connect to Neo4j instances with auth disabled.
                This will only work if authentication is disabled on the Neo4j Instance we are connecting to.
            </summary>
            <remarks>
                <see cref="M:Neo4j.Driver.GraphDatabase.Driver(System.String,Neo4j.Driver.IAuthToken,System.Action{Neo4j.Driver.ConfigBuilder})" />
            </remarks>
            <param name="principal">This is used to identify who this token represents.</param>
            <param name="credentials">This is credentials authenticating the principal.</param>
            <param name="realm">This is the "realm", specifies the authentication provider.</param>
            <param name="scheme">This is the authentication scheme, specifying what kind of authentication that should be used.</param>
            <param name="parameters">Extra parameters to be sent along the authentication provider. If none is given, then no extra parameters will be added.</param>
            <returns>An authentication token that can be used to connect to Neo4j.</returns>
        </member>
        <member name="T:Neo4j.Driver.Bookmark">
            <summary>
             Identifies a point in the transactional history of the database.
            
             When working with a casual cluster, transactions can be chained to ensure causal consistency. Causal chaining is
             carried out by passing bookmarks between transactions. When a session is constructed with an initial bookmarks, the
             first transaction (either auto-commit or explicit) will be blocked until the server has fast forwarded to catchup
             with the latest of the provided initial bookmarks.
            
             Within a session, bookmark propagation is carried out automatically and does not require any explicit signal or
             setting from the application. To opt out of this mechanism for unrelated units of work, applications can use
             multiple sessions.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.Bookmark.Values">
            <summary>
            Returns a list of bookmark strings that this bookmark instance identifies.
            </summary>
        </member>
        <member name="M:Neo4j.Driver.Bookmark.From(System.String[])">
            <summary>
            Returns a new bookmark instance constructed from the provided list of bookmark strings.
            </summary>
            <param name="values">The bookmark strings to construct from</param>
            <returns>A new bookmark instance</returns>
        </member>
        <member name="T:Neo4j.Driver.Config">
            <summary>
            Use this class to configure the <see cref="T:Neo4j.Driver.IDriver"/>.
            </summary>
            <remarks>
            The defaults for fields in this class are <br/>
            <list type="bullet">
            <item><see cref="P:Neo4j.Driver.Config.EncryptionLevel"/> : <c><see cref="P:Neo4j.Driver.Config.EncryptionLevel"/> Encrypted</c> </item>
            <item><see cref="P:Neo4j.Driver.Config.TrustManager"/> : <c><see cref="P:Neo4j.Driver.Config.TrustManager"/>CreateChainTrust()</c> </item>
            <item><see cref="P:Neo4j.Driver.Config.ConnectionTimeout"/>: <c>30s</c> </item>
            <item><see cref="P:Neo4j.Driver.Config.SocketKeepAlive"/>: <c>true</c></item>
            <item><see cref="P:Neo4j.Driver.Config.Ipv6Enabled"/>: <c>true</c></item>
            <br></br>
            <item><see cref="P:Neo4j.Driver.Config.MaxConnectionPoolSize"/> : <c>500</c> </item>
            <item><see cref="P:Neo4j.Driver.Config.ConnectionAcquisitionTimeout"/> : <c>1mins</c> </item>
            <item><see cref="P:Neo4j.Driver.Config.ConnectionIdleTimeout"/>: <see cref="F:Neo4j.Driver.Config.InfiniteInterval"/></item>
            <item><see cref="P:Neo4j.Driver.Config.MaxConnectionLifetime"/>: <c>1h</c></item>
            <br></br>
            <item><see cref="P:Neo4j.Driver.Config.Logger"/> : <c>logs nothing.</c></item>
            <item><see cref="P:Neo4j.Driver.Config.MaxTransactionRetryTime"/>: <c>30s</c></item>
            <br></br>
            <item><see cref="P:Neo4j.Driver.Config.DefaultReadBufferSize"/> : <c>32K</c> </item>
            <item><see cref="P:Neo4j.Driver.Config.MaxReadBufferSize"/> : <c>128K</c> </item>
            <item><see cref="P:Neo4j.Driver.Config.DefaultWriteBufferSize"/> : <c>16K</c> </item>
            <item><see cref="P:Neo4j.Driver.Config.MaxWriteBufferSize"/> : <c>64K</c> </item>
            </list>
            </remarks>
        </member>
        <member name="F:Neo4j.Driver.Config.InfiniteInterval">
            <summary>
            This const defines the value of infinite interval in terms of configuration properties.
            </summary>
        </member>
        <member name="F:Neo4j.Driver.Config.Infinite">
            <summary>
            This const defines the value of infinite in terms of configuration properties.
            </summary>
        </member>
        <member name="F:Neo4j.Driver.Config.Default">
            <summary>
            Returns the default configuration for the <see cref="T:Neo4j.Driver.IDriver"/>.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.Config.Builder">
            <summary>
            Create an instance of <see cref="T:Neo4j.Driver.ConfigBuilder"/> to build a <see cref="T:Neo4j.Driver.Config"/>.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.Config.EncryptionLevel">
            <summary>
            The use of encryption for all the connections created by the <see cref="T:Neo4j.Driver.IDriver"/>.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.Config.TrustManager">
            <summary>
            Specifies which <see cref="P:Neo4j.Driver.Config.TrustManager"/> implementation should be used while establishing trust via TLS.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.Config.Logger">
            <summary>
            The <see cref="T:Neo4j.Driver.ILogger"/> instance to be used to receive all logs produced by this driver.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.Config.MaxTransactionRetryTime">
            <summary>
            The maximum transaction retry timeout.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.Config.MaxIdleConnectionPoolSize">
            <summary>
            The max idle connection pool size. If the value of this is not internal set,
            then it will default to be the same as <see cref="P:Neo4j.Driver.Config.MaxConnectionPoolSize"/>
            </summary>
            <remarks>
            The max idle connection pool size represents the maximum number of idle connections buffered by the driver.
            An idle connection is a connection that has already been connected to the database instance and doesn't need to re-initialize.
            Setting this value to <see cref="F:Neo4j.Driver.Config.Infinite"/> results in the idle pool size to be assigned the same value as <see cref="P:Neo4j.Driver.Config.MaxConnectionPoolSize"/>.
            </remarks>
            <remarks>Also see <see cref="P:Neo4j.Driver.Config.MaxConnectionPoolSize"/></remarks>
        </member>
        <member name="P:Neo4j.Driver.Config.MaxConnectionPoolSize">
            <summary>
            The max connection pool size.
            </summary>
            <remarks>
            The max connection pool size specifies the allowed maximum number of idle and current in-use connections by the driver.
            a.k.a. ConnectionPoolSize = IdleConnectionPoolSize + InUseConnectionSize.
            When a driver reaches its allowed maximum connection pool size, no new connections can be established.
            Instead all threads that require a new connection have to wait until a connection is available to reclaim.
            See <see cref="P:Neo4j.Driver.Config.ConnectionAcquisitionTimeout"/>for the maximum waiting time to acquire an idle connection from the pool.
            Setting this value to <see cref="F:Neo4j.Driver.Config.Infinite"/> will result in an infinite pool.
            </remarks>
            <remarks>Also see <see cref="P:Neo4j.Driver.Config.MaxIdleConnectionPoolSize"/></remarks>
        </member>
        <member name="P:Neo4j.Driver.Config.ConnectionAcquisitionTimeout">
            <summary>
            The maximum waiting time to either acquire an idle connection from the pool when connection pool is full
            or create a new connection when pool is not full.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.Config.ConnectionTimeout">
            <summary>
            The connection timeout when establishing a connection with a server.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.Config.SocketKeepAlive">
            <summary>
            The socket keep alive option.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.Config.ConnectionIdleTimeout">
            <summary>
            The idle timeout on pooled connections.
            A connection that has been idled in connection pool for longer than the given timeout is stale and will be closed once it is seen.
            Use <see cref="F:Neo4j.Driver.Config.InfiniteInterval"/> to disable idle time checking.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.Config.MaxConnectionLifetime">
            <summary>
            The maximum connection lifetime on pooled connections.
            A connection that has been created for longer than the given time will be closed once it is seen.
            Use <see cref="F:Neo4j.Driver.Config.InfiniteInterval"/> to disable connection lifetime checking.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.Config.Ipv6Enabled">
            <summary>
            The connections to support ipv6 addresses.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.Config.Resolver">
            <summary>
            Gets or internal sets a custom server address resolver used by the routing driver to resolve the initial address used to create the driver.
            Such resolution happens: 1) during the very first rediscovery when driver is created.
            2) when all the known routers from the current routing table have failed and driver needs to fallback to the initial address.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.Config.MetricsEnabled">
            <summary>
            Enable the driver level metrics.
            Internally used for testing and experimenting.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.Config.DefaultReadBufferSize">
            <summary>
            The default read buffer size which the driver allocates for its internal buffers.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.Config.MaxReadBufferSize">
            <summary>
            The size when internal read buffers reach, will be released for garbage collection. 
            If reading large records (nodes, relationships or paths) and experiencing too much garbage collection consider increasing this size
            to a reasonable amount depending on your data.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.Config.DefaultWriteBufferSize">
            <summary>
            The default write buffer size which the driver allocates for its internal buffers.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.Config.MaxWriteBufferSize">
            <summary>
            The size when internal write buffers reach, will be released for garbage collection. 
            If writing large values and experiencing too much garbage collection consider increasing this size
            to a reasonable amount depending on your data.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.Config.FetchSize">
            <summary>
            The default fetch size.
            Since Bolt v4 (Neo4j 4.0+), the query running result (records) are pulled from server in batches.
            This fetch size defines how many records to pull in each batch.
            Use <see cref="F:Neo4j.Driver.Config.Infinite"/> to disable batching and always pull all records in one batch instead.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.Config.UserAgent">
            <summary>
            Used to get and set the User Agent string. If not used the default will be "neo4j-dotnet/x.y" 
            where x is the major version and y is the minor version.
            </summary>
        </member>
        <member name="T:Neo4j.Driver.ConfigBuilder">
            <summary>
            Provides a way to generate a <see cref="T:Neo4j.Driver.Config"/> instance fluently.
            </summary>
        </member>
        <member name="M:Neo4j.Driver.ConfigBuilder.Build">
            <summary>
            Builds the <see cref="T:Neo4j.Driver.Config"/> instance based on the previously internal set values.
            </summary>
            <remarks>>
            If no value was internal set for a property the defaults specified in <see cref="T:Neo4j.Driver.Config"/> will be used.
            </remarks>
            <returns>A <see cref="T:Neo4j.Driver.Config"/> instance.</returns>
        </member>
        <member name="M:Neo4j.Driver.ConfigBuilder.WithEncryptionLevel(Neo4j.Driver.EncryptionLevel)">
            <summary>
            Sets the <see cref="T:Neo4j.Driver.Config"/> to use TLS if <paramref name="level"/> is <c>true</c>.
            </summary>
            <param name="level"><see cref="F:Neo4j.Driver.EncryptionLevel.Encrypted"/> enables TLS for the connection, <see cref="F:Neo4j.Driver.EncryptionLevel.None"/> otherwise. See <see cref="T:Neo4j.Driver.EncryptionLevel"/> for more info</param>.
            <returns>An <see cref="T:Neo4j.Driver.ConfigBuilder"/> instance for further configuration options.</returns>
        </member>
        <member name="M:Neo4j.Driver.ConfigBuilder.WithTrustManager(Neo4j.Driver.TrustManager)">
            <summary>
            Sets the <see cref="T:Neo4j.Driver.TrustManager"/> to use while establishing trust via TLS.
            The <paramref name="manager"/> will not take effect if <see cref="P:Neo4j.Driver.Config.EncryptionLevel"/> decides to use no TLS
            encryption on the connections.
            </summary>
            <param name="manager">A <see cref="T:Neo4j.Driver.TrustManager"/> instance.</param>
            <returns>An <see cref="T:Neo4j.Driver.ConfigBuilder"/> instance for further configuration options.</returns>
        </member>
        <member name="M:Neo4j.Driver.ConfigBuilder.WithLogger(Neo4j.Driver.ILogger)">
            <summary>
            Sets the <see cref="T:Neo4j.Driver.Config"/> to use a given <see cref="T:Neo4j.Driver.ILogger"/> instance.
            </summary>
            <param name="logger">The <see cref="T:Neo4j.Driver.ILogger"/> instance to use, if <c>null</c> no logging will occur.</param>
            <returns>An <see cref="T:Neo4j.Driver.ConfigBuilder"/> instance for further configuration options.</returns>
        </member>
        <member name="M:Neo4j.Driver.ConfigBuilder.WithMaxIdleConnectionPoolSize(System.Int32)">
            <summary>
            Sets the size of the idle connection pool.
            </summary>
            <param name="size">The size of the <see cref="P:Neo4j.Driver.Config.MaxIdleConnectionPoolSize"/>,
            internal set to 0 will disable connection pooling.</param>.
            <returns>An <see cref="T:Neo4j.Driver.ConfigBuilder"/> instance for further configuration options.</returns>
        </member>
        <member name="M:Neo4j.Driver.ConfigBuilder.WithMaxConnectionPoolSize(System.Int32)">
            <summary>
            Sets the size of the connection pool.
            </summary>
            <param name="size">The size of the <see cref="P:Neo4j.Driver.Config.MaxConnectionPoolSize"/></param>
            <returns>An <see cref="T:Neo4j.Driver.ConfigBuilder"/> instance for further configuration options.</returns>
        </member>
        <member name="M:Neo4j.Driver.ConfigBuilder.WithConnectionAcquisitionTimeout(System.TimeSpan)">
            <summary>
            Sets the maximum connection acquisition timeout for waiting for a connection to become available in idle connection pool
            when <see cref="P:Neo4j.Driver.Config.MaxConnectionPoolSize"/> is reached.
            </summary>
            <param name="timeSpan">The connection acquisition timeout.</param>
            <returns>An <see cref="T:Neo4j.Driver.ConfigBuilder"/> instance for further configuration options.</returns>
        </member>
        <member name="M:Neo4j.Driver.ConfigBuilder.WithConnectionTimeout(System.TimeSpan)">
            <summary>
            Specify socket connection timeout.
            A <see cref="T:System.TimeSpan"/> that represents the number of milliseconds to wait, or <see cref="F:Neo4j.Driver.Config.InfiniteInterval"/> to wait indefinitely.
            </summary>
            <param name="timeSpan">Represents the number of milliseconds to wait or <see cref="F:Neo4j.Driver.Config.InfiniteInterval"/> to wait indefinitely.</param>
            <returns>An <see cref="T:Neo4j.Driver.ConfigBuilder"/> instance for further configuration options.</returns>
        </member>
        <member name="M:Neo4j.Driver.ConfigBuilder.WithSocketKeepAliveEnabled(System.Boolean)">
            <summary>
            Enable socket to send keep alive pings on TCP level to prevent pooled socket connections from getting killed after leaving client idle for a long time.
            The interval of keep alive pings are internal set via your OS system.
            </summary>
            <param name="enable"></param>
            <returns>An <see cref="T:Neo4j.Driver.ConfigBuilder"/> instance for further configuration options.</returns>
        </member>
        <member name="M:Neo4j.Driver.ConfigBuilder.WithMaxTransactionRetryTime(System.TimeSpan)">
             <summary>
             Specify the maximum time transactions are allowed to retry via transaction functions.
            
             These methods will retry the given unit of work on <see cref="T:Neo4j.Driver.SessionExpiredException"/>,
             <see cref="T:Neo4j.Driver.TransientException"/> and <see cref="T:Neo4j.Driver.ServiceUnavailableException"/>
             with exponential backoff using initial delay of 1 second.
             Default value is 30 seconds.
             </summary>
             <param name="time">Specify the maximum retry time. </param>
             <returns>An <see cref="T:Neo4j.Driver.ConfigBuilder"/> instance for further configuration options.</returns>
        </member>
        <member name="M:Neo4j.Driver.ConfigBuilder.WithConnectionIdleTimeout(System.TimeSpan)">
            <summary>
            Specify the connection idle timeout.
            The connection that has been idled in pool for longer than specified timeout will not be reused but closed.
            </summary>
            <param name="timeSpan">The max timespan that a connection can be reused after has been idle for.</param>
            <returns>An <see cref="T:Neo4j.Driver.ConfigBuilder"/> instance for further configuration options.</returns>
        </member>
        <member name="M:Neo4j.Driver.ConfigBuilder.WithMaxConnectionLifetime(System.TimeSpan)">
            <summary>
            Specify the maximum connection life time.
            The connection that has been created for longer than specified time will not be reused but closed.
            </summary>
            <param name="timeSpan">The max timespan that a connection can be reused after has been created for.</param>
            <returns>An <see cref="T:Neo4j.Driver.ConfigBuilder"/> instance for further configuration options.</returns>
        </member>
        <member name="M:Neo4j.Driver.ConfigBuilder.WithIpv6Enabled(System.Boolean)">
            <summary>
            Setting this option to true will enable ipv6 on socket connections.
            </summary>
            <param name="enable">true to enable ipv6, false to only support ipv4 addresses.</param>
            <returns>An <see cref="T:Neo4j.Driver.ConfigBuilder"/> instance for further configuration options.</returns>
        </member>
        <member name="M:Neo4j.Driver.ConfigBuilder.WithResolver(Neo4j.Driver.IServerAddressResolver)">
            <summary>
            Gets or internal sets a custom server address resolver used by the routing driver to resolve the initial address used to create the driver.
            Such resolution happens: 1) during the very first rediscovery when driver is created.
            2) when all the known routers from the current routing table have failed and driver needs to fallback to the initial address.
            </summary>
            <param name="resolver">The resolver, default to a resolver that simply pass the initial server address as it is.</param>
            <returns>An <see cref="T:Neo4j.Driver.ConfigBuilder"/> instance for further configuration options.</returns>
        </member>
        <member name="M:Neo4j.Driver.ConfigBuilder.WithDefaultReadBufferSize(System.Int32)">
            <summary>
            Specify the default read buffer size which the driver allocates for its internal buffers.
            </summary>
            <param name="defaultReadBufferSize">the buffer size</param>
            <returns>An <see cref="T:Neo4j.Driver.ConfigBuilder"/> instance for further configuration options.</returns>
        </member>
        <member name="M:Neo4j.Driver.ConfigBuilder.WithMaxReadBufferSize(System.Int32)">
            <summary>
            Specify the size when internal read buffers reach, will be released for garbage collection.
            </summary>
            <param name="maxReadBufferSize">the buffer size</param>
            <returns>An <see cref="T:Neo4j.Driver.ConfigBuilder"/> instance for further configuration options.</returns>
            <remarks>If reading large records (nodes, relationships or paths) and experiencing too much garbage collection
            consider increasing this size to a reasonable amount depending on your data.</remarks>
        </member>
        <member name="M:Neo4j.Driver.ConfigBuilder.WithDefaultWriteBufferSize(System.Int32)">
            <summary>
            Specify the default write buffer size which the driver allocates for its internal buffers.
            </summary>
            <param name="defaultWriteBufferSize">the buffer size</param>
            <returns>An <see cref="T:Neo4j.Driver.ConfigBuilder"/> instance for further configuration options.</returns>
        </member>
        <member name="M:Neo4j.Driver.ConfigBuilder.WithMaxWriteBufferSize(System.Int32)">
            <summary>
            Specify the size when internal write buffers reach, will be released for garbage collection.
            </summary>
            <param name="maxWriteBufferSize">the buffer size</param>
            <returns>An <see cref="T:Neo4j.Driver.ConfigBuilder"/> instance for further configuration options.</returns>
            <remarks>If writing large values and experiencing too much garbage collection
            consider increasing this size to a reasonable amount depending on your data.</remarks>
        </member>
        <member name="M:Neo4j.Driver.ConfigBuilder.WithFetchSize(System.Int64)">
            <summary>
            Sets the default fetch size.
            Since Bolt v4 (Neo4j 4.0+), the query running result (records) are pulled from server in batches.
            This fetch size defines how many records to pull in each batch.
            Use <see cref="F:Neo4j.Driver.Config.Infinite"/> to disable batching and always pull all records in one batch instead.
            </summary>
            <param name="size">The fetch size.</param>
            <returns>An <see cref="T:Neo4j.Driver.ConfigBuilder"/> instance for further configuration options.</returns>
        </member>
        <member name="T:Neo4j.Driver.EncryptionLevel">
            <summary>
            Control the level of encryption to require.
            </summary>
        </member>
        <member name="F:Neo4j.Driver.EncryptionLevel.None">
            <summary>
            No encryption at all.
            </summary>
        </member>
        <member name="F:Neo4j.Driver.EncryptionLevel.Encrypted">
            <summary>
            Always encrypted.
            </summary>
        </member>
        <member name="T:Neo4j.Driver.ResultCursorExtensions">
            <summary>
            Extension methods for <see cref="T:Neo4j.Driver.IResultCursor"/>
            </summary>
        </member>
        <member name="M:Neo4j.Driver.ResultCursorExtensions.SingleAsync(Neo4j.Driver.IResultCursor)">
            <summary>
            Return the only record in the result stream.
            </summary>
            <param name="result">The result stream</param>
            <returns>The only record in the result stream.</returns>
            <remarks>Throws <exception cref="T:System.InvalidOperationException"></exception>
            if the result contains more than one record or the result is empty.</remarks>
        </member>
        <member name="M:Neo4j.Driver.ResultCursorExtensions.SingleAsync``1(Neo4j.Driver.IResultCursor,System.Func{Neo4j.Driver.IRecord,``0})">
            <summary>
            Return the only record in the result stream.
            </summary>
            <param name="result">The result stream</param>
            <param name="operation">The operation to carry out on each record.</param>
            <typeparam name="T">The type of the record after specified operation.</typeparam>
            <returns>The only record after specified operation in the result stream.</returns>
            <remarks>Throws <exception cref="T:System.InvalidOperationException"></exception>
            if the result contains more than one record or the result is empty.</remarks>
        </member>
        <member name="M:Neo4j.Driver.ResultCursorExtensions.ToListAsync(Neo4j.Driver.IResultCursor)">
            <summary>
            Pull all records in the result stream into memory and return in a list.
            </summary>
            <param name="result"> The result stream.</param>
            <returns>A list with all records in the result stream.</returns>
        </member>
        <member name="M:Neo4j.Driver.ResultCursorExtensions.ToListAsync``1(Neo4j.Driver.IResultCursor,System.Func{Neo4j.Driver.IRecord,``0})">
            <summary>
            Apply the operation on each record in the result stream and return the operation results in a list.
            </summary>
            <typeparam name="T">The return type of the list</typeparam>
            <param name="result">The result stream.</param>
            <param name="operation">The operation to carry out on each record.</param>
            <returns>A list of collected operation result.</returns>
        </member>
        <member name="M:Neo4j.Driver.ResultCursorExtensions.ForEachAsync(Neo4j.Driver.IResultCursor,System.Action{Neo4j.Driver.IRecord})">
            <summary>
            Read each record in the result stream and apply the operation on each record.
            </summary>
            <param name="result">The result stream.</param>
            <param name="operation">The operation is carried out on each record.</param>
            <returns>The result summary after all records have been processed.</returns>
        </member>
        <member name="T:Neo4j.Driver.ValueExtensions">
            <summary>
            A collection of extensions to process values streamed back via Bolt.
            </summary>
        </member>
        <member name="M:Neo4j.Driver.ValueExtensions.As``1(System.Object,``0)">
            <summary>
            A helper method to explicitly cast the value streamed back via Bolt to a local type,
            with default fallback value.
            </summary>
            <param name="value">The value that streamed back via Bolt protocol, e.g.<see cref="P:Neo4j.Driver.IEntity.Properties"/>.</param>
            <param name="defaultValue">Returns this value if the the value is null</param>
            <typeparam name="T">
            Supports for the following types (or nullable version of the following types if applies):
            <see cref="T:System.Int16"/>,
            <see cref="T:System.Int32"/>,
            <see cref="T:System.Int64"/>,
            <see cref="T:System.Single"/>,
            <see cref="T:System.Double"/>,
            <see cref="T:System.SByte"/>,
            <see cref="T:System.UInt16"/>,
            <see cref="T:System.UInt32"/>,
            <see cref="T:System.UInt64"/>,
            <see cref="T:System.Byte"/>,
            <see cref="T:System.Char"/>,
            <see cref="T:System.Boolean"/>,
            <see cref="T:System.String"/>,
            <see cref="T:System.Collections.Generic.List`1"/>,
            <see cref="T:Neo4j.Driver.INode"/>,
            <see cref="T:Neo4j.Driver.IRelationship"/>,
            <see cref="T:Neo4j.Driver.IPath"/>.
            Undefined support for other types that are not listed above.
            No support for user-defined types, e.g. Person, Movie.
            </typeparam>
            <returns>The value of specified return type.</returns>
            <remarks>Throws <see cref="T:System.InvalidCastException"/> if the specified cast is not possible.</remarks>
        </member>
        <member name="M:Neo4j.Driver.ValueExtensions.As``1(System.Object)">
            <summary>
            A helper method to explicitly cast the value streamed back via Bolt to a local type.
            </summary>
            <typeparam name="T">
            Supports for the following types (or nullable version of the following types if applies):
            <see cref="T:System.Int16"/>,
            <see cref="T:System.Int32"/>,
            <see cref="T:System.Int64"/>,
            <see cref="T:System.Single"/>,
            <see cref="T:System.Double"/>,
            <see cref="T:System.SByte"/>,
            <see cref="T:System.UInt16"/>,
            <see cref="T:System.UInt32"/>,
            <see cref="T:System.UInt64"/>,
            <see cref="T:System.Byte"/>,
            <see cref="T:System.Char"/>,
            <see cref="T:System.Boolean"/>,
            <see cref="T:System.String"/>, 
            <see cref="T:System.Collections.Generic.List`1"/>,
            <see cref="T:Neo4j.Driver.INode"/>,
            <see cref="T:Neo4j.Driver.IRelationship"/>,
            <see cref="T:Neo4j.Driver.IPath"/>.
            Undefined support for other types that are not listed above.
            No support for user-defined types, e.g. Person, Movie.
            </typeparam>
            <param name="value">The value that streamed back via Bolt protocol, e.g.<see cref="P:Neo4j.Driver.IEntity.Properties"/>.</param>
            <returns>The value of specified return type.</returns>
            <remarks>Throws <see cref="T:System.InvalidCastException"/> if the specified cast is not possible.</remarks>
        </member>
        <member name="T:Neo4j.Driver.GraphDatabase">
            <summary>
                Creates <see cref="T:Neo4j.Driver.IDriver" /> instances, optionally letting you
                configure them.
            </summary>
        </member>
        <member name="M:Neo4j.Driver.GraphDatabase.Driver(System.String)">
            <summary>
                Returns a driver for a Neo4j instance with default configuration settings.
            </summary>
            <param name="uri">
                The URI to the Neo4j instance. Should be in the form
                <c>protocol://&lt;server location&gt;:&lt;port&gt;</c>.
                If <c>port</c> is not supplied the default of <c>7687</c> will
                be used.
                The supported protocols in URI could either be <c>bolt</c> or <c>neo4j</c>.
                The protocol <c>bolt</c> should be used when creating a driver connecting to the Neo4j instance directly.
                The protocol <c>neo4j</c> should be used when creating a driver with built-in routing.
            </param>
            <returns>A new <see cref="T:Neo4j.Driver.IDriver" /> instance specified by the <paramref name="uri" />.</returns>
            <remarks>Ensure you provide the protocol for the <paramref name="uri" />.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="uri" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Neo4j.Driver.GraphDatabase.Driver(System.Uri)">
            <summary>
                Returns a driver for a Neo4j instance with default configuration settings.
            </summary>
            <param name="uri">
                The URI to the Neo4j instance. Should be in the form
                <c>protocol://&lt;server location&gt;:&lt;port&gt;</c>.
                If <c>port</c> is not supplied the default of <c>7687</c> will
                be used.
                The supported protocols in URI could either be <c>bolt</c> or <c>neo4j</c>.
                The protocol <c>bolt</c> should be used when creating a driver connecting to the Neo4j instance directly.
                The protocol <c>neo4j</c> should be used when creating a driver with built-in routing.
            </param>
            <returns>A new <see cref="T:Neo4j.Driver.IDriver" /> instance specified by the <paramref name="uri" />.</returns>
            <remarks>Ensure you provide the protocol for the <paramref name="uri" />.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="uri" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Neo4j.Driver.GraphDatabase.Driver(System.String,System.Action{Neo4j.Driver.ConfigBuilder})">
            <summary>
                Returns a driver for a Neo4j instance with custom configuration.
            </summary>
            <param name="uri">
                The URI to the Neo4j instance. Should be in the form
                <c>protocol://&lt;server location&gt;:&lt;port&gt;</c>.
                If <c>port</c> is not supplied the default of <c>7687</c> will
                be used.
                The supported protocols in URI could either be <c>bolt</c> or <c>neo4j</c>.
                The protocol <c>bolt</c> should be used when creating a driver connecting to the Neo4j instance directly.
                The protocol <c>neo4j</c> should be used when creating a driver with built-in routing.
            </param>
            <param name="action">
            Specifies how to build a driver configuration <see cref="T:Neo4j.Driver.Config"/>, using <see cref="T:Neo4j.Driver.ConfigBuilder"/>.
            If set to <c>null</c>, then no modification will be carried out
            and the default driver configurations <see cref="T:Neo4j.Driver.Config"/> will be used when creating the driver.
            </param>
            <returns>A new <see cref="T:Neo4j.Driver.IDriver" /> instance specified by the <paramref name="uri" />.</returns>
            <remarks>Ensure you provide the protocol for the <paramref name="uri" />.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="uri" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Neo4j.Driver.GraphDatabase.Driver(System.Uri,System.Action{Neo4j.Driver.ConfigBuilder})">
            <summary>
                Returns a driver for a Neo4j instance with custom configuration.
            </summary>
            <param name="uri">
                The URI to the Neo4j instance. Should be in the form
                <c>protocol://&lt;server location&gt;:&lt;port&gt;</c>.
                If <c>port</c> is not supplied the default of <c>7687</c> will
                be used.
                The supported protocols in URI could either be <c>bolt</c> or <c>neo4j</c>.
                The protocol <c>bolt</c> should be used when creating a driver connecting to the Neo4j instance directly.
                The protocol <c>neo4j</c> should be used when creating a driver with built-in routing.
            </param>
            <param name="action">
            Specifies how to build a driver configuration <see cref="T:Neo4j.Driver.Config"/>, using <see cref="T:Neo4j.Driver.ConfigBuilder"/>.
            If set to <c>null</c>, then no modification will be carried out
            and the default driver configurations <see cref="T:Neo4j.Driver.Config"/> will be used when creating the driver.
            </param>
            <returns>A new <see cref="T:Neo4j.Driver.IDriver" /> instance specified by the <paramref name="uri" />.</returns>
            <remarks>Ensure you provide the protocol for the <paramref name="uri" />.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="uri" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Neo4j.Driver.GraphDatabase.Driver(System.String,Neo4j.Driver.IAuthToken)">
            <summary>
                Returns a driver for a Neo4j instance with default configuration settings.
            </summary>
            <param name="uri">
                The URI to the Neo4j instance. Should be in the form
                <c>protocol://&lt;server location&gt;:&lt;port&gt;</c>.
                If <c>port</c> is not supplied the default of <c>7687</c> will
                be used.
                The supported protocols in URI could either be <c>bolt</c> or <c>neo4j</c>.
                The protocol <c>bolt</c> should be used when creating a driver connecting to the Neo4j instance directly.
                The protocol <c>neo4j</c> should be used when creating a driver with built-in routing.
            </param>
            <param name="authToken">Authentication to use, <see cref="T:Neo4j.Driver.AuthTokens" />.</param>
            <returns>A new <see cref="T:Neo4j.Driver.IDriver" /> instance specified by the <paramref name="uri" />.</returns>
            <remarks>Ensure you provide the protocol for the <paramref name="uri" />.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="uri" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Neo4j.Driver.GraphDatabase.Driver(System.Uri,Neo4j.Driver.IAuthToken)">
            <summary>
                Returns a driver for a Neo4j instance with default configuration settings.
            </summary>
            <param name="uri">
                The URI to the Neo4j instance. Should be in the form
                <c>protocol://&lt;server location&gt;:&lt;port&gt;</c>.
                If <c>port</c> is not supplied the default of <c>7687</c> will
                be used.
                The supported protocols in URI could either be <c>bolt</c> or <c>neo4j</c>.
                The protocol <c>bolt</c> should be used when creating a driver connecting to the Neo4j instance directly.
                The protocol <c>neo4j</c> should be used when creating a driver with built-in routing.
            </param>
            <param name="authToken">Authentication to use, <see cref="T:Neo4j.Driver.AuthTokens" />.</param>
            <returns>A new <see cref="T:Neo4j.Driver.IDriver" /> instance specified by the <paramref name="uri" />.</returns>
            <remarks>Ensure you provide the protocol for the <paramref name="uri" />.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="uri" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Neo4j.Driver.GraphDatabase.Driver(System.String,Neo4j.Driver.IAuthToken,System.Action{Neo4j.Driver.ConfigBuilder})">
            <summary>
                Returns a driver for a Neo4j instance with custom configuration.
            </summary>
            <param name="uri">
                The URI to the Neo4j instance. Should be in the form
                <c>protocol://&lt;server location&gt;:&lt;port&gt;</c>.
                If <c>port</c> is not supplied the default of <c>7687</c> will
                be used.
                The supported protocols in URI could either be <c>bolt</c> or <c>neo4j</c>.
                The protocol <c>bolt</c> should be used when creating a driver connecting to the Neo4j instance directly.
                The protocol <c>neo4j</c> should be used when creating a driver with built-in routing.
            </param>
            <param name="authToken">Authentication to use, <see cref="T:Neo4j.Driver.AuthTokens" />.</param>
            <param name="action">
            Specifies how to build a driver configuration <see cref="T:Neo4j.Driver.Config"/>, using <see cref="T:Neo4j.Driver.ConfigBuilder"/>.
            If set to <c>null</c>, then no modification will be carried out
            and the default driver configurations <see cref="T:Neo4j.Driver.Config"/> will be used when creating the driver.
            </param>
            <returns>A new driver to the database instance specified by the <paramref name="uri"/>.</returns>
        </member>
        <member name="M:Neo4j.Driver.GraphDatabase.Driver(System.Uri,Neo4j.Driver.IAuthToken,System.Action{Neo4j.Driver.ConfigBuilder})">
            <summary>
            Returns a driver for a Neo4j instance with custom configuration.
            </summary>
            <param name="uri">        
            The URI to the Neo4j instance. Should be in the form
            <c>neo4j://&lt;server location&gt;:&lt;port&gt;</c>.
            If <c>port</c> is not supplied the default of <c>7687</c> will be used.</param>
            <param name="authToken">Authentication to use, <see cref="T:Neo4j.Driver.AuthTokens" />.</param>
            <param name="action">
            Defines how to build a driver configuration <see cref="T:Neo4j.Driver.Config"/> using <see cref="T:Neo4j.Driver.ConfigBuilder"/>.
            If set to <c>null</c>, then no modification will be carried out on the build.
            As a result, a default config with default settings will be used <see cref="T:Neo4j.Driver.Config" /> when creating the new driver.
            </param>
            <returns>A new driver to the database instance specified by the <paramref name="uri"/>.</returns>
        </member>
        <member name="T:Neo4j.Driver.IAsyncQueryRunner">
            <summary>
             Common interface for components that can execute Neo4j queries.
            </summary>
            <remarks>
            <see cref="T:Neo4j.Driver.IAsyncSession"/> and <see cref="T:Neo4j.Driver.IAsyncTransaction"/>
            </remarks>
        </member>
        <member name="M:Neo4j.Driver.IAsyncQueryRunner.RunAsync(System.String)">
             <summary>
             
             Asynchronously run a query and return a task of result stream.
            
             This method accepts a String representing a Cypher query which will be 
             compiled into a query object that can be used to efficiently execute this
             query multiple times. This method optionally accepts a set of parameters
             which will be injected into the query object query by Neo4j. 
            
             </summary>
             <param name="query">A Cypher query.</param>
             <returns>A task of a stream of result values and associated metadata.</returns>
        </member>
        <member name="M:Neo4j.Driver.IAsyncQueryRunner.RunAsync(System.String,System.Object)">
            <summary>
            Asynchronously execute a query and return a task of result stream.
            </summary>
            <param name="query">A Cypher query.</param>
            <param name="parameters">A parameter dictionary which is made of prop.Name=prop.Value pairs would be created.</param>
            <returns>A task of a stream of result values and associated metadata.</returns>
        </member>
        <member name="M:Neo4j.Driver.IAsyncQueryRunner.RunAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
             <summary>
             
             Asynchronously run a query and return a task of result stream.
            
             This method accepts a String representing a Cypher query which will be 
             compiled into a query object that can be used to efficiently execute this
             query multiple times. This method optionally accepts a set of parameters
             which will be injected into the query object query by Neo4j. 
            
             </summary>
             <param name="query">A Cypher query.</param>
             <param name="parameters">Input parameters for the query.</param>
             <returns>A task of a stream of result values and associated metadata.</returns>
        </member>
        <member name="M:Neo4j.Driver.IAsyncQueryRunner.RunAsync(Neo4j.Driver.Query)">
             <summary>
            
             Asynchronously execute a query and return a task of result stream.
            
             </summary>
             <param name="query">A Cypher query, <see cref="T:Neo4j.Driver.Query"/>.</param>
             <returns>A task of a stream of result values and associated metadata.</returns>
        </member>
        <member name="T:Neo4j.Driver.IAsyncSession">
             <summary>
             A live session with a Neo4j instance.
            
             Sessions serve a role in transaction isolation and ordering semantics.
             Within a session, transactions run sequentially one after another.
            
             Session objects are not thread safe, if you want to run concurrent operations against the database,
             simply create multiple session objects.
             </summary>
        </member>
        <member name="M:Neo4j.Driver.IAsyncSession.BeginTransactionAsync">
             <summary>
             Asynchronously begin a new transaction in this session using server default transaction configurations.
             A session can have at most one transaction running at a time, if you
             want to run multiple concurrent transactions, you should use multiple concurrent sessions.
             
             All data operations in Neo4j are transactional. However, for convenience we provide a <see cref="M:Neo4j.Driver.IAsyncQueryRunner.RunAsync(Neo4j.Driver.Query)"/>
             method directly on this session interface as well. When you use that method, your query automatically gets
             wrapped in a transaction.
            
             If you want to run multiple queries in the same transaction, you should wrap them in a transaction using this
             method.
             </summary>
             <returns>A task of a new transaction.</returns>
        </member>
        <member name="M:Neo4j.Driver.IAsyncSession.BeginTransactionAsync(System.Action{Neo4j.Driver.TransactionConfigBuilder})">
             <summary>
             Asynchronously begin a new transaction with a specific <see cref="T:Neo4j.Driver.TransactionConfig"/> in this session.
             A session can have at most one transaction running at a time, if you
             want to run multiple concurrent transactions, you should use multiple concurrent sessions.
             
             All data operations in Neo4j are transactional. However, for convenience we provide a <see cref="M:Neo4j.Driver.IAsyncQueryRunner.RunAsync(Neo4j.Driver.Query)"/>
             method directly on this session interface as well. When you use that method, your query automatically gets
             wrapped in a transaction.
            
             If you want to run multiple queries in the same transaction, you should wrap them in a transaction using this
             method.
             </summary>
             <param name="action">Given a <see cref="T:Neo4j.Driver.TransactionConfigBuilder"/>, defines how to set the configurations for the new transaction.
             This configuration overrides server side default transaction configurations. See <see cref="T:Neo4j.Driver.TransactionConfig"/></param>
             <returns>A task of a new transaction.</returns>
        </member>
        <member name="M:Neo4j.Driver.IAsyncSession.ReadTransactionAsync``1(System.Func{Neo4j.Driver.IAsyncTransaction,System.Threading.Tasks.Task{``0}})">
            <summary>
            Asynchronously execute given unit of work in a <see cref="F:Neo4j.Driver.AccessMode.Read"/> transaction.
            </summary>
            <typeparam name="T">The return type of the given unit of work.</typeparam>
            <param name="work">The <see cref="T:System.Func`2"/> to be applied to a new read transaction.</param>
            <returns>A task of a result as returned by the given unit of work.</returns>
        </member>
        <member name="M:Neo4j.Driver.IAsyncSession.ReadTransactionAsync(System.Func{Neo4j.Driver.IAsyncTransaction,System.Threading.Tasks.Task})">
            <summary>
            Asynchronously execute given unit of work in a <see cref="F:Neo4j.Driver.AccessMode.Read"/> transaction.
            </summary>
            <param name="work">The <see cref="T:System.Func`2"/> to be applied to a new read transaction.</param>
            <returns>A task representing the completion of the transactional read operation enclosing the given unit of work.</returns>
        </member>
        <member name="M:Neo4j.Driver.IAsyncSession.ReadTransactionAsync``1(System.Func{Neo4j.Driver.IAsyncTransaction,System.Threading.Tasks.Task{``0}},System.Action{Neo4j.Driver.TransactionConfigBuilder})">
            <summary>
            Asynchronously execute given unit of work in a <see cref="F:Neo4j.Driver.AccessMode.Read"/> transaction with a specific <see cref="T:Neo4j.Driver.TransactionConfig"/>.
            </summary>
            <typeparam name="T">The return type of the given unit of work.</typeparam>
            <param name="work">The <see cref="T:System.Func`2"/> to be applied to a new read transaction.</param>
            <param name="action">Given a <see cref="T:Neo4j.Driver.TransactionConfigBuilder"/>, defines how to set the configurations for the new transaction.
            This configuration overrides server side default transaction configurations. See <see cref="T:Neo4j.Driver.TransactionConfig"/></param>
            <returns>A task of a result as returned by the given unit of work.</returns>
        </member>
        <member name="M:Neo4j.Driver.IAsyncSession.ReadTransactionAsync(System.Func{Neo4j.Driver.IAsyncTransaction,System.Threading.Tasks.Task},System.Action{Neo4j.Driver.TransactionConfigBuilder})">
            <summary>
            Asynchronously execute given unit of work in a <see cref="F:Neo4j.Driver.AccessMode.Read"/> transaction with a specific <see cref="T:Neo4j.Driver.TransactionConfig"/>.
            </summary>
            <param name="work">The <see cref="T:System.Func`2"/> to be applied to a new read transaction.</param>
            <param name="action">Given a <see cref="T:Neo4j.Driver.TransactionConfigBuilder"/>, defines how to set the configurations for the new transaction.
            This configuration overrides server side default transaction configurations. See <see cref="T:Neo4j.Driver.TransactionConfig"/></param>
            <returns>A task representing the completion of the transactional read operation enclosing the given unit of work.</returns>
        </member>
        <member name="M:Neo4j.Driver.IAsyncSession.WriteTransactionAsync``1(System.Func{Neo4j.Driver.IAsyncTransaction,System.Threading.Tasks.Task{``0}})">
            <summary>
             Asynchronously execute given unit of work in a <see cref="F:Neo4j.Driver.AccessMode.Write"/> transaction.
            </summary>
            <typeparam name="T">The return type of the given unit of work.</typeparam>
            <param name="work">The <see cref="T:System.Func`2"/> to be applied to a new write transaction.</param>
            <returns>A task of a result as returned by the given unit of work.</returns>
        </member>
        <member name="M:Neo4j.Driver.IAsyncSession.WriteTransactionAsync(System.Func{Neo4j.Driver.IAsyncTransaction,System.Threading.Tasks.Task})">
            <summary>
             Asynchronously execute given unit of work in a <see cref="F:Neo4j.Driver.AccessMode.Write"/> transaction.
            </summary>
            <param name="work">The <see cref="T:System.Func`2"/> to be applied to a new write transaction.</param>
            <returns>A task representing the completion of the transactional write operation enclosing the given unit of work.</returns>
        </member>
        <member name="M:Neo4j.Driver.IAsyncSession.WriteTransactionAsync``1(System.Func{Neo4j.Driver.IAsyncTransaction,System.Threading.Tasks.Task{``0}},System.Action{Neo4j.Driver.TransactionConfigBuilder})">
            <summary>
             Asynchronously execute given unit of work in a <see cref="F:Neo4j.Driver.AccessMode.Write"/> transaction with a specific <see cref="T:Neo4j.Driver.TransactionConfig"/>.
            </summary>
            <typeparam name="T">The return type of the given unit of work.</typeparam>
            <param name="work">The <see cref="T:System.Func`2"/> to be applied to a new write transaction.</param>
            <param name="action">Given a <see cref="T:Neo4j.Driver.TransactionConfigBuilder"/>, defines how to set the configurations for the new transaction.
            This configuration overrides server side default transaction configurations. See <see cref="T:Neo4j.Driver.TransactionConfig"/></param>
            <returns>A task of a result as returned by the given unit of work.</returns>
        </member>
        <member name="M:Neo4j.Driver.IAsyncSession.WriteTransactionAsync(System.Func{Neo4j.Driver.IAsyncTransaction,System.Threading.Tasks.Task},System.Action{Neo4j.Driver.TransactionConfigBuilder})">
            <summary>
             Asynchronously execute given unit of work in a <see cref="F:Neo4j.Driver.AccessMode.Write"/> transaction with a specific <see cref="T:Neo4j.Driver.TransactionConfig"/>.
            </summary>
            <param name="work">The <see cref="T:System.Func`2"/> to be applied to a new write transaction.</param>
            <param name="action">Given a <see cref="T:Neo4j.Driver.TransactionConfigBuilder"/>, defines how to set the configurations for the new transaction.
            This configuration overrides server side default transaction configurations. See <see cref="T:Neo4j.Driver.TransactionConfig"/></param>
            <returns>A task representing the completion of the transactional write operation enclosing the given unit of work.</returns>
        </member>
        <member name="M:Neo4j.Driver.IAsyncSession.CloseAsync">
            <summary>
            Close all resources used in this Session. If any transaction is left open in this session without commit or rollback,
            then this method will rollback the transaction.
            </summary>
            <returns>A task representing the completion of successfully closed the session.</returns>
        </member>
        <member name="P:Neo4j.Driver.IAsyncSession.LastBookmark">
            <summary>
            Gets the bookmark received following the last successfully completed <see cref="T:Neo4j.Driver.IAsyncTransaction"/>.
            If no bookmark was received or if this transaction was rolled back, the bookmark value will not be changed.
            </summary>
        </member>
        <member name="M:Neo4j.Driver.IAsyncSession.RunAsync(System.String,System.Action{Neo4j.Driver.TransactionConfigBuilder})">
             <summary>
             
             Asynchronously run a query with the specific <see cref="T:Neo4j.Driver.TransactionConfig"/> and return a task of result stream.
            
             This method accepts a String representing a Cypher query which will be 
             compiled into a query object that can be used to efficiently execute this
             query multiple times. This method optionally accepts a set of parameters
             which will be injected into the query object query by Neo4j. 
            
             </summary>
             <param name="query">A Cypher query.</param>
             <param name="action">Given a <see cref="T:Neo4j.Driver.TransactionConfigBuilder"/>, defines how to set the configurations for the new transaction.</param>
             <returns>A task of a stream of result values and associated metadata.</returns>
        </member>
        <member name="M:Neo4j.Driver.IAsyncSession.RunAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Action{Neo4j.Driver.TransactionConfigBuilder})">
             <summary>
             
             Asynchronously run a query with the customized <see cref="T:Neo4j.Driver.TransactionConfig"/> and return a task of result stream.
            
             This method accepts a String representing a Cypher query which will be 
             compiled into a query object that can be used to efficiently execute this
             query multiple times. This method optionally accepts a set of parameters
             which will be injected into the query object query by Neo4j. 
            
             </summary>
             <param name="query">A Cypher query.</param>
             <param name="parameters">Input parameters for the query.</param>
             <param name="action">Given a <see cref="T:Neo4j.Driver.TransactionConfigBuilder"/>, defines how to set the configurations for the new transaction.</param>
             <returns>A task of a stream of result values and associated metadata.</returns>
        </member>
        <member name="M:Neo4j.Driver.IAsyncSession.RunAsync(Neo4j.Driver.Query,System.Action{Neo4j.Driver.TransactionConfigBuilder})">
             <summary>
            
             Asynchronously execute a query with the specific <see cref="T:Neo4j.Driver.TransactionConfig"/> and return a task of result stream.
            
             </summary>
             <param name="query">A Cypher query, <see cref="T:Neo4j.Driver.Query"/>.</param>
             <param name="action">Given a <see cref="T:Neo4j.Driver.TransactionConfigBuilder"/>, defines how to set the configurations for the new transaction.
             </param>
             <returns>A task of a stream of result values and associated metadata.</returns>
        </member>
        <member name="P:Neo4j.Driver.IAsyncSession.SessionConfig">
            <summary>
            Gets the session configurations back
            </summary>
        </member>
        <member name="T:Neo4j.Driver.IAsyncTransaction">
            <summary>
            Represents a transaction in the Neo4j database.
            </summary>
        </member>
        <member name="M:Neo4j.Driver.IAsyncTransaction.CommitAsync">
            <summary>
            Asynchronously commit this transaction.
            </summary>
            <returns>A task of transaction commit.</returns>
        </member>
        <member name="M:Neo4j.Driver.IAsyncTransaction.RollbackAsync">
            <summary>
            Asynchronously roll back this transaction.
            </summary>
            <returns>A task of transaction rollback.</returns>
        </member>
        <member name="P:Neo4j.Driver.IAsyncTransaction.TransactionConfig">
            <summary>
            Gets the transaction configuration back.
            </summary>
        </member>
        <member name="T:Neo4j.Driver.IAuthToken">
            <summary>
                An authentication token is used to authenticate with a Neo4j instance. 
                It usually contains a <c>Principal</c>, for instance a username, and one or more <c>Credentials</c>, for instance a password.
                See <see cref="T:Neo4j.Driver.AuthTokens" /> for available types of <see cref="T:Neo4j.Driver.IAuthToken"/>s.
            </summary>
            <remarks>
                <see cref="M:Neo4j.Driver.GraphDatabase.Driver(System.String,Neo4j.Driver.IAuthToken,System.Action{Neo4j.Driver.ConfigBuilder})" />
            </remarks>
        </member>
        <member name="T:Neo4j.Driver.IDriver">
            <summary>
                The <see cref="T:Neo4j.Driver.IDriver"/> instance maintains the connections with a Neo4j database, providing an access point via the
                <see cref="T:Neo4j.Driver.IAsyncSession" /> method.
            </summary>
            <remarks>
            The Driver maintains a connection pool buffering connections created by the user.
            The size of the buffer can be configured by the <see cref="P:Neo4j.Driver.Config.MaxConnectionPoolSize" />
            property on the <see cref="T:Neo4j.Driver.Config" /> when creating the Driver.
            </remarks>
        </member>
        <member name="M:Neo4j.Driver.IDriver.AsyncSession">
            <summary>
            Obtain a session with the default <see cref="T:Neo4j.Driver.SessionConfig"/>.
            </summary>
            <returns>An <see cref="T:Neo4j.Driver.IAsyncSession"/> that could be used to execute queries.</returns>
        </member>
        <member name="M:Neo4j.Driver.IDriver.AsyncSession(System.Action{Neo4j.Driver.SessionConfigBuilder})">
            <summary>
            Obtain a session with the customized <see cref="T:Neo4j.Driver.SessionConfig"/>.
            </summary>
            <param name="action">An action, provided with a <see cref="T:Neo4j.Driver.SessionConfigBuilder"/> instance, that should populate
            the provided instance with desired <see cref="T:Neo4j.Driver.SessionConfig"/>.</param>
            <returns>An <see cref="T:Neo4j.Driver.IAsyncSession"/> that could be used to execute queries.</returns>
        </member>
        <member name="M:Neo4j.Driver.IDriver.CloseAsync">
            <summary>
            Asynchronously releases all resources (connection pools, connections, etc) associated with this IDriver instance.
            </summary>
            <returns>The close task.</returns>
        </member>
        <member name="M:Neo4j.Driver.IDriver.VerifyConnectivityAsync">
            <summary>
            Asynchronously verify if the driver can connect to the remote server by establishing a network connection with the remote.
            If the driver fails to connect to the remote server, an error will be thrown,
            which can be used to further understand the cause of the connectivity issue.
            Note: Even if this method failed with an error, the driver still need to be closed via <see cref="M:Neo4j.Driver.IDriver.CloseAsync"/> to free up all resources.
            </summary>
            <returns>The verification task.</returns>
        </member>
        <member name="M:Neo4j.Driver.IDriver.SupportsMultiDbAsync">
            <summary>
            Asynchronously verify if the driver connects to a server and/or cluster that can support multi-database feature.
            </summary>
            <returns>True if the remote server and/or cluster support multi-databases, otherwise false.</returns>
        </member>
        <member name="P:Neo4j.Driver.IDriver.Config">
            <summary>
            Gets the driver configurations.
            </summary>
        </member>
        <member name="T:Neo4j.Driver.ILogger">
            <summary>
            The new <see cref="T:Neo4j.Driver.ILogger"/> differs from the legacy one in the message format the logging methods are accepting.
            In <see cref="T:Neo4j.Driver.ILogger"/>, each logging method accepts a message which specifies how the message would be formatted
            and one or many arguments that are used to replace placeholders in the message string.
            The following example shows a simplified version of how the <see cref="T:Neo4j.Driver.ILogger"/> is used in this driver:
            <code>
            logger.Info("Hello {0}, {1}", "Alice", "Bob");
            </code>
            </summary>
        </member>
        <member name="M:Neo4j.Driver.ILogger.Error(System.Exception,System.String,System.Object[])">
            <summary>
            Logs an error.
            </summary>
            <param name="cause">The <see cref="T:System.Exception"/> that causes the error. This value could be null if not applied.</param>
            <param name="message">The message of the error. This value could be null if not applied.</param>
            <param name="args">The arguments to replace placeholders in the message string.</param>
        </member>
        <member name="M:Neo4j.Driver.ILogger.Warn(System.Exception,System.String,System.Object[])">
            <summary>
            Logs a warning.
            </summary>
            <param name="cause">Any <see cref="T:System.Exception"/> that causes this warning. This value could be null if not applied.</param>
            <param name="message">The message of the warning. This value could be null if not applied.</param>
            <param name="args">The arguments to replace placeholders in the message string.</param>
        </member>
        <member name="M:Neo4j.Driver.ILogger.Info(System.String,System.Object[])">
            <summary>
            Logs an information message.
            </summary>
            <param name="message">The message of the information.</param>
            <param name="args">The arguments to replace placeholders in the message.</param>
        </member>
        <member name="M:Neo4j.Driver.ILogger.Debug(System.String,System.Object[])">
            <summary>
            Logs useful messages for debugging.
            The Bolt messages sent and received by this driver are logged at this level.
            </summary>
            <param name="message">The message.</param>
            <param name="args">The arguments to replace placeholders in the message.</param>
        </member>
        <member name="M:Neo4j.Driver.ILogger.Trace(System.String,System.Object[])">
            <summary>
            Log useful messages for tracing.
            The Bolt messages sent and received in hex binary are logged at this level.
            </summary>
            <param name="message">The message.</param>
            <param name="args">The arguments to replace placeholders in the message.</param>
        </member>
        <member name="M:Neo4j.Driver.ILogger.IsTraceEnabled">
            <summary>
            Return if trace logging level is enabled.
            </summary>
            <returns>True if trace logging level is enabled, otherwise False.</returns>
        </member>
        <member name="M:Neo4j.Driver.ILogger.IsDebugEnabled">
            <summary>
            Return if debug logging level is enabled.
            </summary>
            <returns>True if debug logging level is enabled, otherwise False.</returns>
        </member>
        <member name="M:Neo4j.Driver.Internal.AsyncSession.OnResultConsumedAsync">
            <summary>
             This method will be called back by <see cref="T:Neo4j.Driver.Internal.Result.ResultCursorBuilder"/> after it consumed result
            </summary>
        </member>
        <member name="M:Neo4j.Driver.Internal.AsyncSession.OnTransactionDisposeAsync(Neo4j.Driver.Bookmark)">
            <summary>
            Called back when transaction is closed
            </summary>
        </member>
        <member name="M:Neo4j.Driver.Internal.AsyncSession.UpdateBookmark(Neo4j.Driver.Bookmark)">
            <summary>
            Only set the bookmark to a new value if the new value is not null
            </summary>
            <param name="bookmark">The new bookmark</param>
        </member>
        <member name="M:Neo4j.Driver.Internal.AsyncSession.DisposeTransactionAsync">
            <summary>
            Clean any transaction reference.
            If transaction result is not committed, then rollback the transaction.
            </summary>
            <exception cref="T:Neo4j.Driver.ClientException">If error when rollback the transaction</exception>
        </member>
        <member name="T:Neo4j.Driver.Internal.AuthToken">
            <summary>
                A simple common token for authentication schemes that easily convert to an auth token map
            </summary>
        </member>
        <member name="M:Neo4j.Driver.Internal.ConnectionPool.TryIncrementPoolSize">
            <summary>
            Returns true if pool size is successfully increased, otherwise false.
            The reason to failed to increase the pool size probably due to the pool is full already
            </summary>
            <returns>true if pool size is successfully increased, otherwise false.</returns>
        </member>
        <member name="M:Neo4j.Driver.Internal.IConnectionValidator.OnReleaseAsync(Neo4j.Driver.Internal.IPooledConnection)">
            <summary>
            Healthy check on the connection before pooling
            </summary>
            <param name="connection">The connection to be checked.</param>
            <returns>True if the connection is good to be pooled, otherwise false.</returns>
        </member>
        <member name="M:Neo4j.Driver.Internal.IConnectionValidator.OnRequire(Neo4j.Driver.Internal.IPooledConnection)">
            <summary>
            Healthy check before lending the connection outside the pool.
            </summary>
            <param name="connection">The connection to be checked.</param>
            <returns>True if the connection is in a good state to be used by transactions and sessions, otherwise false.</returns>
        </member>
        <member name="M:Neo4j.Driver.Internal.Connector.IConnection.DestroyAsync">
            <summary>
            Close and release related resources
            </summary>
        </member>
        <member name="M:Neo4j.Driver.Internal.Connector.IConnection.CloseAsync">
            <summary>
            Close connection
            </summary>
        </member>
        <member name="P:Neo4j.Driver.Internal.Connector.IConnection.IsOpen">
            <summary>
            Return true if the underlying socket connection is till open, otherwise false.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.Internal.Connector.IConnection.Server">
            <summary>
            The info of the server the connection connected to.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.Internal.Connector.IConnection.BoltProtocol">
            <summary>
            The Bolt protocol that the connection is talking with.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.Internal.Connector.IConnection.Mode">
            <summary>
            The AccessMode this connection is operating in.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.Internal.Connector.IConnection.Database">
            <summary>
            The Database this connection is acquired for.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.Internal.Connector.PooledConnection.HasUnrecoverableError">
            <summary>
            Return true if unrecoverable error has been received on this connection, otherwise false.
            The connection that has been marked as has unrecoverable errors will be eventually closed when returning back to the pool.
            </summary>
        </member>
        <member name="T:Neo4j.Driver.Internal.EncryptionManager">
            <summary>
            Manages how the driver will establish (encrypted) connections with the server.
            </summary>
        </member>
        <member name="M:Neo4j.Driver.Internal.ByteExtensions.ToByteArray(System.String)">
            <summary>
            Takes the format: 00 00 00 and converts to a byte array.
            </summary>
            <param name="hex"></param>
            <returns></returns>
        </member>
        <member name="T:Neo4j.Driver.Internal.FetchSizeUtil">
            <summary>
            A util class for handling fetch size.
            </summary>
        </member>
        <member name="M:Neo4j.Driver.Internal.FetchSizeUtil.AssertValidFetchSize(System.Nullable{System.Int64})">
            <summary>
            Validate the fetch size.
            A valid fetch size can be a positive number, or -1.
            </summary>
            <param name="size">The fetch size.</param>
            <returns>A valid fetch size.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If the input value is null, 0, or unsupported negative numbers.</exception>
        </member>
        <member name="M:Neo4j.Driver.Internal.IO.PackStreamBitConverter.GetBytes(System.Byte)">
            <summary>
                Converts a byte to bytes.
            </summary>
            <param name="value">The byte value to convert.</param>
            <returns>The specified byte value as an array of bytes.</returns>
        </member>
        <member name="M:Neo4j.Driver.Internal.IO.PackStreamBitConverter.GetBytes(System.Int16)">
            <summary>
                Converts a shot (Int16) to bytes.
            </summary>
            <param name="value">The short (Int16) value to convert.</param>
            <returns>The specified short (Int16) value as an array of bytes.</returns>
        </member>
        <member name="M:Neo4j.Driver.Internal.IO.PackStreamBitConverter.GetBytes(System.UInt16)">
            <summary>
                Converts a shot (UInt16) to bytes.
            </summary>
            <param name="value">The short (UInt16) value to convert.</param>
            <returns>The specified short (UInt16) value as an array of bytes.</returns>
        </member>
        <member name="M:Neo4j.Driver.Internal.IO.PackStreamBitConverter.GetBytes(System.Int32)">
            <summary>
                Converts an int (Int32) to bytes.
            </summary>
            <param name="value">The int (Int32) value to convert.</param>
            <returns>The specified int (Int32) value as an array of bytes.</returns>
        </member>
        <member name="M:Neo4j.Driver.Internal.IO.PackStreamBitConverter.GetBytes(System.UInt32)">
            <summary>
                Converts an uint (UInt32) to bytes.
            </summary>
            <param name="value">The uint (UInt32) value to convert.</param>
            <returns>The specified uint (UInt32) value as an array of bytes.</returns>
        </member>
        <member name="M:Neo4j.Driver.Internal.IO.PackStreamBitConverter.GetBytes(System.Int64)">
            <summary>
                Converts an int (Int64) to bytes.
            </summary>
            <param name="value">The int (Int64) value to convert.</param>
            <returns>The specified int (Int64) value as an array of bytes.</returns>
        </member>
        <member name="M:Neo4j.Driver.Internal.IO.PackStreamBitConverter.GetBytes(System.Double)">
            <summary>
                Converts an int (double) to bytes.
            </summary>
            <param name="value">The int (double) value to convert.</param>
            <returns>The specified int (double) value as an array of bytes.</returns>
        </member>
        <member name="M:Neo4j.Driver.Internal.IO.PackStreamBitConverter.GetBytes(System.String)">
            <summary>
                Converts an string to bytes.
            </summary>
            <param name="value">The string value to convert.</param>
            <returns>The specified string value as an array of bytes.</returns>
        </member>
        <member name="M:Neo4j.Driver.Internal.IO.PackStreamBitConverter.ToInt16(System.Byte[])">
            <summary>
                Converts an byte array to a short.
            </summary>
            <param name="bytes">The byte array to convert.</param>
            <returns>A short converted from the byte array.</returns>
        </member>
        <member name="M:Neo4j.Driver.Internal.IO.PackStreamBitConverter.ToUInt16(System.Byte[])">
            <summary>
                Converts an byte array to a unsigned short.
            </summary>
            <param name="bytes">The byte array to convert.</param>
            <returns>A unsigned short converted from the byte array.</returns>
        </member>
        <member name="M:Neo4j.Driver.Internal.IO.PackStreamBitConverter.ToInt32(System.Byte[])">
            <summary>
                Converts an byte array to a int (Int32).
            </summary>
            <param name="bytes">The byte array to convert.</param>
            <returns>A int (Int32) converted from the byte array.</returns>
        </member>
        <member name="M:Neo4j.Driver.Internal.IO.PackStreamBitConverter.ToInt64(System.Byte[])">
            <summary>
                Converts an byte array to a int (Int64).
            </summary>
            <param name="bytes">The byte array to convert.</param>
            <returns>A int (Int64) converted from the byte array.</returns>
        </member>
        <member name="M:Neo4j.Driver.Internal.IO.PackStreamBitConverter.ToDouble(System.Byte[])">
            <summary>
                Converts an byte array to a int (double).
            </summary>
            <param name="bytes">The byte array to convert.</param>
            <returns>A int (double) converted from the byte array.</returns>
        </member>
        <member name="M:Neo4j.Driver.Internal.IO.PackStreamBitConverter.ToString(System.Byte[])">
            <summary>
                Converts an byte array of a UTF8 encoded string to a string
            </summary>
            <param name="bytes">The byte array to convert.</param>
            <returns>A string converted from the byte array</returns>
        </member>
        <member name="M:Neo4j.Driver.Internal.IO.PackStreamBitConverter.ToTargetEndian(System.Byte[])">
            <summary>
                Converts the bytes to big endian.
            </summary>
            <param name="bytes">The bytes to convert.</param>
            <returns>The bytes converted to big endian.</returns>
        </member>
        <member name="M:Neo4j.Driver.Internal.IO.PackStreamBitConverter.ToPlatformEndian(System.Byte[])">
            <summary>
                Converts the bytes to the platform endian type.
            </summary>
            <param name="bytes">The bytes to convert.</param>
            <returns>The bytes converted to the platform endian type.</returns>
        </member>
        <member name="M:Neo4j.Driver.Internal.IPooledConnection.ClearConnectionAsync">
            <summary>
            Try to reset the connection to a clean state.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.Internal.ITimer.ElapsedMilliseconds">
            <summary>Gets the total elapsed time measured by the current instance, in milliseconds.</summary>
            <returns>A read-only long integer representing the total number of milliseconds measured by the current instance.</returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Neo4j.Driver.Internal.ITimer.Reset">
            <summary>Stops time interval measurement and resets the elapsed time to zero.</summary>
        </member>
        <member name="M:Neo4j.Driver.Internal.ITimer.Start">
            <summary>Starts, or resumes, measuring elapsed time for an interval.</summary>
        </member>
        <member name="T:Neo4j.Driver.Internal.Metrics.IMetrics">
            <summary>
            The driver metrics
            </summary>
        </member>
        <member name="P:Neo4j.Driver.Internal.Metrics.IMetrics.ConnectionPoolMetrics">
            <summary>
            The connection pool metrics.
            </summary>
        </member>
        <member name="T:Neo4j.Driver.Internal.Metrics.IConnectionPoolMetrics">
            <summary>
            The connection pool metrics
            </summary>
        </member>
        <member name="P:Neo4j.Driver.Internal.Metrics.IConnectionPoolMetrics.Id">
            <summary>
            The unique name of this metrics, used as an unique identifier among all <see cref="T:Neo4j.Driver.Internal.Metrics.IConnectionPoolMetrics"/> instances.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.Internal.Metrics.IConnectionPoolMetrics.InUse">
            <summary>
            The amount of the connections that are used by user's application
            </summary>
        </member>
        <member name="P:Neo4j.Driver.Internal.Metrics.IConnectionPoolMetrics.Idle">
            <summary>
            The amount of connections that are buffered by the pool
            </summary>
        </member>
        <member name="P:Neo4j.Driver.Internal.Metrics.IConnectionPoolMetrics.Creating">
            <summary>
            The amount of connections that are waiting to be created.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.Internal.Metrics.IConnectionPoolMetrics.Created">
            <summary>
            The amount of connections that have been created by this driver
            </summary>
        </member>
        <member name="P:Neo4j.Driver.Internal.Metrics.IConnectionPoolMetrics.FailedToCreate">
            <summary>
            The amount of connections that are failed to be created.
            The cause of the error could be pool is full for example.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.Internal.Metrics.IConnectionPoolMetrics.Closing">
            <summary>
            The amount of connections that are waiting to be closed.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.Internal.Metrics.IConnectionPoolMetrics.Closed">
            <summary>
            The amount of connections that have been closed by this driver.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.Internal.Metrics.IConnectionPoolMetrics.Acquiring">
            <summary>
            The amount of requests trying to acquire a connection from the pool.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.Internal.Metrics.IConnectionPoolMetrics.Acquired">
            <summary>
            The amount of requests that have acquired a connection out of the pool.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.Internal.Metrics.IConnectionPoolMetrics.TimedOutToAcquire">
            <summary>
            The amount of requests to acquire a connection from pool but failed due to acquisition timeout.
            </summary>
        </member>
        <member name="T:Neo4j.Driver.Internal.Result.ResultCursorBuilder.IAutoPullHandler">
            <summary>
            Auto pull is disabled when there is too few records, and re-enabled when there is too many records.
            The auto pull state will be checked when the record is consumed.
            </summary>
        </member>
        <member name="T:Neo4j.Driver.Internal.Result.Notification">
            <summary>
            This is a notification
            </summary>
        </member>
        <member name="M:Neo4j.Driver.Internal.Routing.ClusterDiscovery.DiscoverAsync(Neo4j.Driver.Internal.Connector.IConnection,System.String,Neo4j.Driver.Bookmark)">
            <remarks>Throws <see cref="T:Neo4j.Driver.ProtocolException"/> if the discovery result is invalid.</remarks>
            <remarks>Throws <see cref="T:Neo4j.Driver.ServiceUnavailableException"/> if the no discovery procedure could be found in the server.</remarks>
        </member>
        <member name="T:Neo4j.Driver.Internal.Types.ISegment">
            <summary>
               
            A <c>Segment</c> combines a relationship in a path with a start and end node that describe the traversal direction
            for that relationship. This exists because the relationship has a direction between the two nodes that is
            separate and potentially different from the direction of the path.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.Internal.Types.ISegment.Start">
            <summary>
            Gets the start node underlying this path segment.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.Internal.Types.ISegment.End">
            <summary>
            Gets the end node underlying this path segment.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.Internal.Types.ISegment.Relationship">
            <summary>
            Gets the relationship underlying this path segment.
            </summary>
        </member>
        <member name="M:Neo4j.Driver.Internal.Util.ConcurrentHashSet`1.TryAdd(`0)">
            <summary>
            true if the item was added to the set successfully; false if the item already exists.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Neo4j.Driver.Internal.Util.ConcurrentHashSet`1.TryRemove(`0)">
            <summary>
            true if the item was removed from the set successfully; false if the item does not exists.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Neo4j.Driver.Internal.Util.ConcurrentOrderedSet`1.Add(`0)">
            <summary>
                Add one item into this set.
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:Neo4j.Driver.Internal.Util.ConcurrentOrderedSet`1.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Adds several _items into this set.
            </summary>
            <param name="items">The _items to add</param>
        </member>
        <member name="M:Neo4j.Driver.Internal.Util.ConcurrentOrderedSet`1.Remove(`0)">
            <summary>
                Remove one item from this set
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Neo4j.Driver.Internal.Util.ConcurrentOrderedSet`1.Clear">
            <summary>
                Clean all the item inside this set
            </summary>
        </member>
        <member name="P:Neo4j.Driver.Internal.Util.ConcurrentOrderedSet`1.Count">
            <summary>
                Number of items in this set
            </summary>
        </member>
        <member name="P:Neo4j.Driver.Internal.Util.ConcurrentOrderedSet`1.IsEmpty">
            <summary>
                Check if this set is empty
            </summary>
        </member>
        <member name="M:Neo4j.Driver.Internal.Util.ConcurrentOrderedSet`1.GetEnumerator">
            <returns>The enumerator of the current snapshot of the set</returns>
        </member>
        <member name="M:Neo4j.Driver.Internal.Util.ConcurrentOrderedSet`1.System#Collections#IEnumerable#GetEnumerator">
            <returns>The enumerator of the current snapshot of the set</returns>
        </member>
        <member name="F:Neo4j.Driver.Internal.Util.ConnectionContext.Simple">
            <summary>
            This describes a read connection with default database.
            </summary>
        </member>
        <member name="T:Neo4j.Driver.IRecord">
            <summary>
             A record contains ordered key and value pairs
            </summary>
        </member>
        <member name="P:Neo4j.Driver.IRecord.Item(System.Int32)">
            <summary>
            Gets the value at the given index.
            </summary>
            <param name="index">The index</param>
            <returns>The value specified with the given index.</returns>
        </member>
        <member name="P:Neo4j.Driver.IRecord.Item(System.String)">
            <summary>
            Gets the value specified by the given key.
            </summary>
            <param name="key">The key</param>
            <returns>the value specified with the given key.</returns>
        </member>
        <member name="P:Neo4j.Driver.IRecord.Values">
            <summary>
            Gets the key and value pairs in a <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2"/>.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.IRecord.Keys">
            <summary>
            Gets the keys in a <see cref="T:System.Collections.Generic.IReadOnlyList`1"/>.
            </summary>
        </member>
        <member name="T:Neo4j.Driver.IResultCursor">
            <summary>
            Provides access to the result as an asynchronous stream of <see cref="T:Neo4j.Driver.IRecord"/>s.
            The records in the result is lazily retrieved and could only be visited once in a sequential order.
            </summary>
            <remarks> Calling <see cref="M:Neo4j.Driver.ResultCursorExtensions.ToListAsync(Neo4j.Driver.IResultCursor)"/> will enumerate the entire stream.</remarks>
        </member>
        <member name="M:Neo4j.Driver.IResultCursor.KeysAsync">
            <summary>
            Gets the keys in the result.
            </summary>
            <returns>A task of an array of keys.</returns>
        </member>
        <member name="M:Neo4j.Driver.IResultCursor.ConsumeAsync">
             <summary>
             Asynchronously gets the <see cref="T:Neo4j.Driver.IResultSummary"/> after streaming the whole records to the client.
             If the records in the result are not fully consumed,
             then calling this method will discard all remaining records to yield the summary.
            
             If you want to obtain the summary without discarding the records,
             consider buffering the unconsumed result using <see cref="M:Neo4j.Driver.ResultCursorExtensions.ToListAsync(Neo4j.Driver.IResultCursor)"/>.
            
             If all records in the records stream are already consumed, then this method will return the summary directly.
             </summary>
             <returns>A task returning the result summary of the running query.</returns>
        </member>
        <member name="M:Neo4j.Driver.IResultCursor.PeekAsync">
            <summary>
            Asynchronously investigates the next upcoming record without changing the current position in the result.
            </summary>
            <returns>A task returning next record or null if there is no next record.</returns>
        </member>
        <member name="M:Neo4j.Driver.IResultCursor.FetchAsync">
            <summary>
            Asynchronously tries to advance to the next record.
            </summary>
            <returns>A task returning a <see cref="T:System.Boolean"/>. Task's result is true if there is any result to be consumed, false otherwise.</returns>
        </member>
        <member name="P:Neo4j.Driver.IResultCursor.Current">
            <summary>
            Returns the current record that has already been read via <see cref="M:Neo4j.Driver.IResultCursor.FetchAsync"/>.
            </summary>
            <value>A <see cref="T:Neo4j.Driver.IRecord"/> holding the data sent by the server.</value>
            <remarks>Throws <exception cref="T:System.InvalidOperationException"></exception>
            if accessed without calling <see cref="M:Neo4j.Driver.IResultCursor.FetchAsync"/> or <see cref="M:Neo4j.Driver.IResultCursor.PeekAsync"/>.</remarks>
        </member>
        <member name="T:Neo4j.Driver.IServerAddressResolver">
            <summary>
            Used by routing driver to resolve the initial address used to create the driver.
            Such resolution happens: 1) during the very first rediscovery when driver is created.
            2) when all the known routers from the current routing table have failed and driver needs to fallback to the initial address.
            </summary>
        </member>
        <member name="M:Neo4j.Driver.IServerAddressResolver.Resolve(Neo4j.Driver.ServerAddress)">
            <summary>
            Given a server address with host name and port defined in <see cref="T:Neo4j.Driver.ServerAddress"/>,
            returns the resolved server addresses with host name and port saved in a set of <see cref="T:Neo4j.Driver.ServerAddress"/>.
            </summary>
            <param name="address">The server address to resolve.</param>
            <returns>Resolved server addresses in a set.</returns>
        </member>
        <member name="T:Neo4j.Driver.Neo4jException">
            <summary>
            The base class for all Neo4j exceptions.
            </summary>
        </member>
        <member name="M:Neo4j.Driver.Neo4jException.#ctor">
            <summary>
            Create a new <see cref="T:Neo4j.Driver.Neo4jException"/>
            </summary>
        </member>
        <member name="M:Neo4j.Driver.Neo4jException.#ctor(System.String)">
            <summary>
            Create a new <see cref="T:Neo4j.Driver.Neo4jException"/> with an error message
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Neo4j.Driver.Neo4jException.#ctor(System.String,System.String)">
            <summary>
            Create a new <see cref="T:Neo4j.Driver.Neo4jException"/> with an error code and an error message
            </summary>
            <param name="code">The error code.</param>
            <param name="message">The error message</param>
        </member>
        <member name="M:Neo4j.Driver.Neo4jException.#ctor(System.String,System.Exception)">
            <summary>
            Create a new <see cref="T:Neo4j.Driver.Neo4jException"/> with an error message and an exception.
            </summary>
            <param name="message">The error message.</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="M:Neo4j.Driver.Neo4jException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Create a new <see cref="T:Neo4j.Driver.Neo4jException"/> with an error code, an error message and an exception.
            </summary>
            <param name="code">The error code.</param>
            <param name="message">The error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="P:Neo4j.Driver.Neo4jException.Code">
            <summary>
            Gets or sets the code of a Neo4j exception.
            </summary>
        </member>
        <member name="T:Neo4j.Driver.ClientException">
            <summary>
            A <see cref="T:Neo4j.Driver.ClientException"/> indicates that the client has carried out an operation incorrectly.
            The error code provided can be used to determine further detail for the problem.
            </summary>
        </member>
        <member name="M:Neo4j.Driver.ClientException.#ctor">
            <summary>
            Create a new <see cref="T:Neo4j.Driver.ClientException"/>.
            </summary>
        </member>
        <member name="M:Neo4j.Driver.ClientException.#ctor(System.String)">
            <summary>
            Create a new <see cref="T:Neo4j.Driver.ClientException"/> with an error message.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Neo4j.Driver.ClientException.#ctor(System.String,System.String)">
            <summary>
            Create a new <see cref="T:Neo4j.Driver.ClientException"/> with an error code and an error message.
            </summary>
            <param name="code">The error code.</param>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Neo4j.Driver.ClientException.#ctor(System.String,System.Exception)">
            <summary>
            Create a new <see cref="T:Neo4j.Driver.ClientException"/> with an error message and an exception.
            </summary>
            <param name="message">The error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Neo4j.Driver.ClientException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Create a new <see cref="T:Neo4j.Driver.ClientException"/> with an error code, an error message and an exception.
            </summary>
            <param name="code">The error code.</param>
            <param name="message">The error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Neo4j.Driver.TransientException">
            <summary>
            A <see cref="T:Neo4j.Driver.TransientException"/> signals a failed operation that may be able to succeed 
            if this operation is retried without any intervention by application-level functionality. 
            The error code provided can be used to determine further details for the problem.
            </summary>
        </member>
        <member name="M:Neo4j.Driver.TransientException.#ctor">
            <summary>
            Create a new <see cref="T:Neo4j.Driver.TransientException"/>.
            </summary>
        </member>
        <member name="M:Neo4j.Driver.TransientException.#ctor(System.String,System.String)">
            <summary>
            Create a new <see cref="T:Neo4j.Driver.TransientException"/> with an error code and an error message.
            </summary>
            <param name="code">The error code.</param>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Neo4j.Driver.TransientException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Create a new <see cref="T:Neo4j.Driver.TransientException"/> with an error code, an error message and an exception.
            </summary>
            <param name="code">The error code.</param>
            <param name="message">The error message.</param>
            <param name="innerException">The inner exception which caused this error.</param>
        </member>
        <member name="T:Neo4j.Driver.DatabaseException">
            <summary>
            A <see cref="T:Neo4j.Driver.DatabaseException"/> indicates that there is a problem within the underlying database.
            The error code provided can be used to determine further detail for the problem.
            </summary>
        </member>
        <member name="M:Neo4j.Driver.DatabaseException.#ctor">
            <summary>
            Create a new <see cref="T:Neo4j.Driver.DatabaseException"/>.
            </summary>
        </member>
        <member name="M:Neo4j.Driver.DatabaseException.#ctor(System.String,System.String)">
            <summary>
            Create a new <see cref="T:Neo4j.Driver.DatabaseException"/> with an error code and an error message.
            </summary>
            <param name="code">The error code.</param>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Neo4j.Driver.DatabaseException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Create a new <see cref="T:Neo4j.Driver.DatabaseException"/> with an error code, an error message and an exception.
            </summary>
            <param name="code">The error code.</param>
            <param name="message">The error message.</param>
            <param name="innerException">The inner exception which caused this error.</param>
        </member>
        <member name="T:Neo4j.Driver.ServiceUnavailableException">
            <summary>
             A <see cref="T:Neo4j.Driver.ServiceUnavailableException"/> indicates that the driver cannot communicate with the cluster.
            </summary>
        </member>
        <member name="M:Neo4j.Driver.ServiceUnavailableException.#ctor(System.String)">
            <summary>
            Create a new <see cref="T:Neo4j.Driver.ServiceUnavailableException"/> with an error message.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Neo4j.Driver.ServiceUnavailableException.#ctor(System.String,System.Exception)">
            <summary>
            Create a new <see cref="T:Neo4j.Driver.ServiceUnavailableException"/> with an error message and an exception.
            </summary>
            <param name="message">The error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Neo4j.Driver.SessionExpiredException">
             <summary>
             A <see cref="T:Neo4j.Driver.SessionExpiredException"/> indicates that the session can no longer satisfy the criteria under which it was acquired,
             e.g. a server no longer accepts write requests.
            
             A new session needs to be acquired from the driver and all actions taken on the expired session must be replayed.
             </summary>
        </member>
        <member name="M:Neo4j.Driver.SessionExpiredException.#ctor(System.String)">
            <summary>
            Create a new <see cref="T:Neo4j.Driver.SessionExpiredException"/> with an error message.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Neo4j.Driver.SessionExpiredException.#ctor(System.String,System.Exception)">
            <summary>
            Create a new <see cref="T:Neo4j.Driver.SessionExpiredException"/> with an error message and an exception.
            </summary>
            <param name="message">The error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Neo4j.Driver.ProtocolException">
            <summary>
            There was a bolt protocol violation of the contract between the driver and the server. 
            When seen this error, contact driver developers.
            </summary>
        </member>
        <member name="M:Neo4j.Driver.ProtocolException.#ctor(System.String)">
            <summary>
            Create a new <see cref="T:Neo4j.Driver.ProtocolException"/> with an error message.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Neo4j.Driver.ProtocolException.#ctor(System.String,System.String)">
            <summary>
            Create a new <see cref="T:Neo4j.Driver.ProtocolException"/> with an error code and an error message.
            </summary>
            <param name="code">The error code.</param>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Neo4j.Driver.ProtocolException.#ctor(System.String,System.Exception)">
            <summary>
            Create a new <see cref="T:Neo4j.Driver.SessionExpiredException"/> with an error message and an exception.
            </summary>
            <param name="message">The error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Neo4j.Driver.SecurityException">
            <summary>
            Failed to connect the driver to the server due to security errors
            When this type of error happens, recreation of the driver might be required.
            </summary>
        </member>
        <member name="M:Neo4j.Driver.SecurityException.#ctor(System.String)">
            <summary>
            Create a new <see cref="T:Neo4j.Driver.SecurityException"/> with an error message.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Neo4j.Driver.SecurityException.#ctor(System.String,System.String)">
            <summary>
            Create a new <see cref="T:Neo4j.Driver.SecurityException"/> with an error code and an error message.
            </summary>
            <param name="code">The error code.</param>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Neo4j.Driver.SecurityException.#ctor(System.String,System.Exception)">
            <summary>
            Create a new <see cref="T:Neo4j.Driver.SecurityException"/> with an error message and an exception.
            </summary>
            <param name="message">The error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Neo4j.Driver.AuthenticationException">
            <summary>
            Failed to authentication the client to the server due to bad credentials
            To recover from this error, close the current driver and restart with the correct credentials 
            </summary>
        </member>
        <member name="M:Neo4j.Driver.AuthenticationException.#ctor(System.String)">
            <summary>
            Create a new <see cref="T:Neo4j.Driver.AuthenticationException"/> with an error message.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="T:Neo4j.Driver.ValueTruncationException">
            <summary>
            A value retrieved from the database needs to be truncated for this conversion to work, and will
            cause working with a modified data.
            </summary>
        </member>
        <member name="M:Neo4j.Driver.ValueTruncationException.#ctor(System.String)">
            <summary>
            Create a new <see cref="T:Neo4j.Driver.ValueTruncationException"/> with an error message.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="T:Neo4j.Driver.ValueOverflowException">
            <summary>
            A value retrieved from the database cannot be represented with the type to be converted, and will
            cause working with a modified data.
            </summary>
        </member>
        <member name="M:Neo4j.Driver.ValueOverflowException.#ctor(System.String)">
            <summary>
            Create a new <see cref="T:Neo4j.Driver.ValueTruncationException"/> with an error message.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="T:Neo4j.Driver.FatalDiscoveryException">
            <summary>
            There was an error that points us to a fatal problem for routing table discovery, like the requested database
            could not be found. This kind of errors are identified as non-transient and are not retried.
            </summary>
        </member>
        <member name="M:Neo4j.Driver.FatalDiscoveryException.#ctor(System.String,System.String)">
            <summary>
            Create a new <see cref="T:Neo4j.Driver.FatalDiscoveryException"/> with an error code and an error message.
            </summary>
            <param name="code">The error code.</param>
            <param name="message">The error message.</param>
        </member>
        <member name="T:Neo4j.Driver.ResultConsumedException">
            <summary>
            The result has already been consumed either by explicit consume call,
            or by termination of session or transaction where the result was obtained.
            Once a result is consumed, the records in the result is not accessible anymore.
            </summary>
        </member>
        <member name="M:Neo4j.Driver.ResultConsumedException.#ctor(System.String)">
            <summary>
            Create a new <see cref="T:Neo4j.Driver.ResultConsumedException"/> with an error message
            </summary>
            <param name="message">The error message</param>
        </member>
        <member name="T:Neo4j.Driver.Query">
            <summary>
            An executable query, i.e. the queries' text and its parameters.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.Query.Text">
            <summary>
            Gets the query's text.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.Query.Parameters">
            <summary>
            Gets the query's parameters.
            </summary>
        </member>
        <member name="M:Neo4j.Driver.Query.#ctor(System.String)">
            <summary>
            Create a query with no query parameters.
            </summary>
            <param name="text">The query's text</param>
        </member>
        <member name="M:Neo4j.Driver.Query.#ctor(System.String,System.Object)">
            <summary>
            Create a query with parameters specified as anonymous objects
            </summary>
            <param name="text">The query's text</param>
            <param name="parameters">The query parameters, specified as an object which is then converted into key-value pairs.</param>
        </member>
        <member name="M:Neo4j.Driver.Query.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Create a query
            </summary>
            <param name="text">The query's text</param>
            <param name="parameters">The query's parameters, whose values should not be changed while the query is used in a session/transaction.</param>
        </member>
        <member name="M:Neo4j.Driver.Query.ToString">
            <summary>
            Print the query.
            </summary>
            <returns>A string representation of the query.</returns>
        </member>
        <member name="T:Neo4j.Driver.ServerAddress">
            <summary>
            A server address consists of <see cref="P:Neo4j.Driver.ServerAddress.Host"/> and <see cref="P:Neo4j.Driver.ServerAddress.Port"/>.
            This address specifies where the driver to find the server.
            </summary>
        </member>
        <member name="M:Neo4j.Driver.ServerAddress.From(System.String,System.Int32)">
            <summary>
            Create a server address with host name and port number.
            </summary>
            <param name="host">The host name of the server address.</param>
            <param name="port">The port number of the server address.</param>
            <returns>An address.</returns>
        </member>
        <member name="M:Neo4j.Driver.ServerAddress.From(System.Uri)">
            <summary>
            Create a server address from a <see cref="T:System.Uri"/>.
            Fields <see cref="P:System.Uri.Host"/> and <see cref="P:System.Uri.Port"/> will be used to create the server address.
            </summary>
            <param name="uri">The input uri to read host name and port number from.</param>
            <returns>An address.</returns>
        </member>
        <member name="P:Neo4j.Driver.ServerAddress.Host">
            <summary>
            Gets the host name of the server address.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.ServerAddress.Port">
            <summary>
            Gets the port number of the server address.
            </summary>
        </member>
        <member name="M:Neo4j.Driver.ServerAddress.Equals(Neo4j.Driver.ServerAddress)">
            <summary>
            Returns a value indicating whether the value of this instance is equal to the
            value of the specified <see cref="T:Neo4j.Driver.ServerAddress"/> instance.
            </summary>
            <param name="other">The object to compare to this instance.</param>
            <returns><code>true</code> if the <code>value</code> parameter equals the value of
            this instance; otherwise, <code>false</code></returns>
        </member>
        <member name="M:Neo4j.Driver.ServerAddress.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="obj">The object to compare to this instance.</param>
            <returns><code>true</code> if <code>value</code> is an instance of <see cref="T:Neo4j.Driver.ServerAddress"/> and
            equals the value of this instance; otherwise, <code>false</code></returns>
        </member>
        <member name="M:Neo4j.Driver.ServerAddress.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Neo4j.Driver.ServerAddress.ToString">
            <summary>
            Print the content of the server address.
            </summary>
            <returns>A string representation of the server address.</returns>
        </member>
        <member name="T:Neo4j.Driver.SessionConfig">
            <summary>
            The interface that defines options applicable to session constructions.
            It could be populated by the provided builder-style methods.
            The default <see cref="T:Neo4j.Driver.SessionConfig"/> defines a <see cref="F:Neo4j.Driver.AccessMode.Write"/> session
            with the server default database using default fetch size specified in <see cref="P:Neo4j.Driver.Config.FetchSize"/>.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.SessionConfig.Database">
             <summary>
             The database that the constructed session will connect to.
            
             <remarks>
             When used against servers supporting multi-databases, it is recommended that this value to be set explicitly
             either through <see cref="M:Neo4j.Driver.SessionConfigBuilder.WithDatabase(System.String)"/> method.
             If not, then the session will connect to the default database configured on the server side.
            
             When used against servers that don't support multi-databases, this property should be left unset.
             </remarks>
             </summary>
             <exception cref="M:Neo4j.Driver.SessionConfig.set_Database(System.String)">throws <see cref="T:System.ArgumentNullException"/> when provided database name
             is null or an empty string.</exception>
        </member>
        <member name="P:Neo4j.Driver.SessionConfig.DefaultAccessMode">
             <summary>
             The type of access required by the constructed session.
            
             This is used to route the requests originating from this session instance to the correct server in a clustered
             environment.
            
             <remarks>The default access mode set is overriden when transaction functions (i.e.
             <see cref="M:Neo4j.Driver.IAsyncSession.ReadTransactionAsync``1(System.Func{Neo4j.Driver.IAsyncTransaction,System.Threading.Tasks.Task{``0}})"/> and
             <see cref="M:Neo4j.Driver.IAsyncSession.WriteTransactionAsync``1(System.Func{Neo4j.Driver.IAsyncTransaction,System.Threading.Tasks.Task{``0}})"/> is
             used (with corresponding access modes derived from invoked method name).
             </remarks>
             </summary>
        </member>
        <member name="P:Neo4j.Driver.SessionConfig.Bookmarks">
             <summary>
             The initial bookmarks to be used by the constructed session.
            
             The first transaction (either auto-commit or explicit) will ensure that the executing server is at least
             up to date to the point identified by the latest of the provided initial bookmarks. The bookmarks can be
             obtained from <see cref="P:Neo4j.Driver.IAsyncSession.LastBookmark"/> (and corresponding properties in other types of
             sessions, i.e. IRxSession or ISession.
             </summary>
        </member>
        <member name="P:Neo4j.Driver.SessionConfig.FetchSize">
            <summary>
            The default fetch size.
            Since Bolt v4 (Neo4j 4.0+), the query running result (records) are pulled from server in batches.
            This fetch size defines how many records to pull in each batch.
            Use <see cref="F:Neo4j.Driver.Config.Infinite"/> to disable batching and always pull all records in one batch instead.
            </summary>
        </member>
        <member name="T:Neo4j.Driver.SessionConfigBuilder">
            <summary>
            The builder to build a <see cref="T:Neo4j.Driver.SessionConfig"/>.
            </summary>
        </member>
        <member name="M:Neo4j.Driver.SessionConfigBuilder.ForDatabase(System.String)">
            <summary>
            Returns an action on <see cref="T:Neo4j.Driver.SessionConfigBuilder"/> which will set the database name to the value specified.
            </summary>
            <param name="database">the database name</param>
            <returns>An action of <see cref="T:Neo4j.Driver.SessionConfigBuilder"/></returns>
        </member>
        <member name="M:Neo4j.Driver.SessionConfigBuilder.WithDatabase(System.String)">
            <summary>
            Sets the database the constructed session will connect to.
            </summary>
            <param name="database">the database name</param>
            <returns>this <see cref="T:Neo4j.Driver.SessionConfigBuilder"/> instance</returns>
            <seealso cref="P:Neo4j.Driver.SessionConfig.Database"/>
        </member>
        <member name="M:Neo4j.Driver.SessionConfigBuilder.WithDefaultAccessMode(Neo4j.Driver.AccessMode)">
            <summary>
            Sets the type of access required by the constructed session.
            </summary>
            <param name="defaultAccessMode">the access mode</param>
            <returns>this <see cref="T:Neo4j.Driver.SessionConfigBuilder"/> instance</returns>
            <seealso cref="P:Neo4j.Driver.SessionConfig.DefaultAccessMode"/>
        </member>
        <member name="M:Neo4j.Driver.SessionConfigBuilder.WithBookmarks(Neo4j.Driver.Bookmark[])">
            <summary>
            Sets the initial bookmarks to be used by the constructed session.
            </summary>
            <param name="bookmarks">the initial bookmarks</param>
            <returns>this <see cref="T:Neo4j.Driver.SessionConfigBuilder"/> instance</returns>
            <seealso cref="P:Neo4j.Driver.SessionConfig.Bookmarks"/>
        </member>
        <member name="M:Neo4j.Driver.SessionConfigBuilder.WithFetchSize(System.Int64)">
            <summary>
            Sets the default fetch size.
            Since Bolt v4 (Neo4j 4.0+), the query running result (records) are pulled from server in batches.
            This fetch size defines how many records to pull in each batch.
            Use <see cref="F:Neo4j.Driver.Config.Infinite"/> to disable batching and always pull all records in one batch instead.
            </summary>
            <param name="size">Fetch size of each record batch.</param>
            <returns>this <see cref="T:Neo4j.Driver.SessionConfigBuilder"/> instance</returns>
            <seealso cref="P:Neo4j.Driver.SessionConfig.FetchSize"/>
        </member>
        <member name="T:Neo4j.Driver.ICounters">
            <summary>
            Represents the changes to the database made as a result of a query being run.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.ICounters.ContainsUpdates">
            <summary>
            Gets whether there were any updates at all, eg. any of the counters are greater than 0.
            </summary>
            <value>Returns <c>true</c> if the query made any updates, <c>false</c> otherwise.</value>
        </member>
        <member name="P:Neo4j.Driver.ICounters.NodesCreated">
            <summary>
            Gets the number of nodes created.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.ICounters.NodesDeleted">
            <summary>
            Gets the number of nodes deleted.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.ICounters.RelationshipsCreated">
            <summary>
            Gets the number of relationships created.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.ICounters.RelationshipsDeleted">
            <summary>
            Gets the number of relationships deleted.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.ICounters.PropertiesSet">
            <summary>
            Gets the number of properties (on both nodes and relationships) set.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.ICounters.LabelsAdded">
            <summary>
            Gets the number of labels added to nodes.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.ICounters.LabelsRemoved">
            <summary>
            Gets the number of labels removed from nodes.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.ICounters.IndexesAdded">
            <summary>
            Gets the number of indexes added to the schema.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.ICounters.IndexesRemoved">
            <summary>
            Gets the number of indexes removed from the schema.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.ICounters.ConstraintsAdded">
            <summary>
            Gets the number of constraints added to the schema.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.ICounters.ConstraintsRemoved">
            <summary>
            Gets the number of constraints removed from the schema.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.ICounters.SystemUpdates">
            <summary>
            Gets the number of system updates performed by this query.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.ICounters.ContainsSystemUpdates">
            <summary>
            If the query updated the system graph in any way, this method will return true.
            </summary>
        </member>
        <member name="T:Neo4j.Driver.IDatabaseInfo">
            <summary>
            Provides information about the database that processed the query.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.IDatabaseInfo.Name">
            <summary>
            The name of the database where the query is processed.
            </summary>
            
            <remarks>Returns <code>null</code> if the source server does not support multiple databases.</remarks>
        </member>
        <member name="T:Neo4j.Driver.IInputPosition">
            <summary>
            An input position refers to a specific character in a query.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.IInputPosition.Offset">
            <summary>
            Gets the character offset referred to by this position; offset numbers start at 0.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.IInputPosition.Line">
            <summary>
            Gets the line number referred to by the position; line numbers start at 1.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.IInputPosition.Column">
            <summary>
            Gets the column number referred to by the position; column numbers start at 1.
            </summary>
        </member>
        <member name="T:Neo4j.Driver.INotification">
            <summary>
            Representation for notifications found when executing a query.
            
            A notification can be visualized in a client pinpointing problems or other information about the query.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.INotification.Code">
             <summary>
            Gets a notification code for the discovered issue.
             </summary>
        </member>
        <member name="P:Neo4j.Driver.INotification.Title">
             <summary>
            Gets a short summary of the notification.
             </summary>
        </member>
        <member name="P:Neo4j.Driver.INotification.Description">
             <summary>
            Gets a longer description of the notification.
             </summary>
        </member>
        <member name="P:Neo4j.Driver.INotification.Position">
             <summary>
            Gets the position in the query where this notification points to.
            Not all notifications have a unique position to point to and in that case the position would be set to all 0s.
             </summary>
        </member>
        <member name="P:Neo4j.Driver.INotification.Severity">
            <summary>
            Gets The severity level of the notification.
            </summary>
        </member>
        <member name="T:Neo4j.Driver.IPlan">
             <summary>
             This describes the <c>Plan</c> that the database planner produced and used (or will use) to execute your query.
             This can be extremely helpful in understanding what a query is doing, and how to optimize it. For more
             details, see the Neo4j Manual.
            
             The plan for the query is a tree of plans - each sub-tree containing zero or more child plans. The query
             starts with the root plan. Each sub-plan is of a specific <see cref="P:Neo4j.Driver.IPlan.OperatorType"/>, which describes
             what that part of the plan does - for instance, perform an index lookup or filter results. The Neo4j Manual contains
             a reference of the available operator types, and these may differ across Neo4j versions.
            
             </summary>
        </member>
        <member name="P:Neo4j.Driver.IPlan.OperatorType">
            <summary>
            Gets the operation this plan is performing.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.IPlan.Arguments">
            <summary>
            Gets the arguments for the <see cref="P:Neo4j.Driver.IPlan.OperatorType"/> used.
            
            Many <see cref="P:Neo4j.Driver.IPlan.OperatorType"/> have arguments defining their specific behavior. This map contains
            those arguments.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.IPlan.Identifiers">
             <summary>
             Gets a list of identifiers used by this plan.
             
             Identifiers used by this part of the plan. These can be both identifiers introduce by you, or automatically
             generated identifiers.
            
             </summary>
        </member>
        <member name="P:Neo4j.Driver.IPlan.Children">
            <summary>
            Gets zero or more child plans.
            
            A plan is a tree, where each child is another plan. The children are where
            this part of the plan gets its input records - unless this is an <see cref="P:Neo4j.Driver.IPlan.OperatorType"/> that introduces
            new records on its own.
            </summary>
        </member>
        <member name="T:Neo4j.Driver.IProfiledPlan">
            <summary>
            This is the same as a regular <see cref="T:Neo4j.Driver.IPlan"/> - except this plan has been executed, meaning it also contains detailed information about how much work each
            step of the plan incurred on the database.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.IProfiledPlan.DbHits">
            <summary>
            Gets the number of times this part of the plan touched the underlying data stores
            </summary>
        </member>
        <member name="P:Neo4j.Driver.IProfiledPlan.Records">
            <summary>
            Gets the number of records this part of the plan produced
            </summary>
        </member>
        <member name="P:Neo4j.Driver.IProfiledPlan.PageCacheHits">
            <summary>
            Gets number of page cache hits caused by executing the associated execution step.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.IProfiledPlan.PageCacheMisses">
            <summary>
            Gets number of page cache misses caused by executing the associated execution step
            </summary>
        </member>
        <member name="P:Neo4j.Driver.IProfiledPlan.PageCacheHitRatio">
            <summary>
            Gets the ratio of page cache hits to total number of lookups or 0 if no data is available
            </summary>
        </member>
        <member name="P:Neo4j.Driver.IProfiledPlan.Time">
            <summary>
            Gets amount of time spent in the associated execution step.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.IProfiledPlan.HasPageCacheStats">
            <summary>
            Gets if the number page cache hits and misses and the ratio was recorded.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.IProfiledPlan.Children">
            <summary>
            Gets zero or more child profiled plans.
            
            A profiled plan is a tree, where each child is another profiled plan. The children are where
            this part of the plan gets its input records - unless this is an <see cref="P:Neo4j.Driver.IPlan.OperatorType"/> that introduces
            new records on its own.
            </summary>
        </member>
        <member name="T:Neo4j.Driver.IResultSummary">
             <summary>
             
             The result summary of running a query. The result summary interface can be used to investigate
             details about the result, like the type of query run, how many and which kinds of updates have been executed,
             and query plan and profiling information if available.
            
             The result summary is only available after all result records have been consumed.
            
             Keeping the result summary around does not influence the lifecycle of any associated session and/or transaction.
             </summary>
        </member>
        <member name="P:Neo4j.Driver.IResultSummary.Query">
            <summary>
            Gets query that has been executed.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.IResultSummary.Counters">
            <summary>
            Gets statistics counts for the query.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.IResultSummary.QueryType">
            <summary>
            Gets type of query that has been executed.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.IResultSummary.HasPlan">
            <summary>
            Gets if the result contained a query plan or not, i.e. is the summary of a Cypher <c>PROFILE</c> or <c>EXPLAIN</c> query.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.IResultSummary.HasProfile">
            <summary>
            Gets if the result contained profiling information or not, i.e. is the summary of a Cypher <c>PROFILE</c> query.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.IResultSummary.Plan">
            <summary>
            Gets query plan for the executed query if available, otherwise null.
            </summary>
            <remarks>
            This describes how the database will execute your query.
            </remarks>
        </member>
        <member name="P:Neo4j.Driver.IResultSummary.Profile">
            <summary>
            Gets profiled query plan for the executed query if available, otherwise null.
            </summary>
            <remarks>
            This describes how the database did execute your query.
            
            If the query you executed (<see cref="P:Neo4j.Driver.IResultSummary.HasProfile"/> was profiled), the query plan will contain detailed
            information about what each step of the plan did. That more in-depth version of the query plan becomes
            available here.
            
            </remarks>
        </member>
        <member name="P:Neo4j.Driver.IResultSummary.Notifications">
            <summary>
            Gets a list of notifications produced while executing the query. The list will be empty if no
            notifications produced while executing the query.
            </summary>
            <remarks>
            A list of notifications that might arise when executing the query.
            Notifications can be warnings about problematic queries or other valuable information that can be presented
            in a client.
            
            Unlike failures or errors, notifications do not affect the execution of a query.
            
            </remarks>
        </member>
        <member name="P:Neo4j.Driver.IResultSummary.ResultAvailableAfter">
            <summary>
            The time it took the server to make the result available for consumption.
            Default to <c>-00:00:00.001</c> if the server version does not support this field in summary.
            </summary>
            <remarks>
            Field introduced in Neo4j 3.1.
            </remarks>
        </member>
        <member name="P:Neo4j.Driver.IResultSummary.ResultConsumedAfter">
            <summary>
            The time it took the server to consume the result.
            Default to <c>-00:00:00.001</c> if the server version does not support this field in summary.
            </summary>
            <remarks>
            Field introduced in Neo4j 3.1.
            </remarks>
        </member>
        <member name="P:Neo4j.Driver.IResultSummary.Server">
            <summary>
            Get some basic information of the server where the query is carried out
            </summary>
        </member>
        <member name="P:Neo4j.Driver.IResultSummary.Database">
            <summary>
            Get the database information that this summary is generated from.
            </summary>
        </member>
        <member name="T:Neo4j.Driver.IServerInfo">
            <summary>
            Provides basic information of the server where the cypher query was executed.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.IServerInfo.Address">
            <summary>
            Get the address of the server
            </summary>
        </member>
        <member name="P:Neo4j.Driver.IServerInfo.Version">
            <summary>
            Get the version of Neo4j running at the server.
            </summary>
            <remarks>
            Introduced since Neo4j 3.1. Default to <c>null</c> if not supported by server
            </remarks>
        </member>
        <member name="T:Neo4j.Driver.QueryType">
            <summary>
            The type of a query.
            </summary>
        </member>
        <member name="F:Neo4j.Driver.QueryType.Unknown">
            <summary>
            The query type is unknown
            </summary>
        </member>
        <member name="F:Neo4j.Driver.QueryType.ReadOnly">
            <summary>
            The query is a readonly query
            </summary>
        </member>
        <member name="F:Neo4j.Driver.QueryType.ReadWrite">
            <summary>
            The query is a readwrite query
            </summary>
        </member>
        <member name="F:Neo4j.Driver.QueryType.WriteOnly">
            <summary>
            The query is a writeonly query
            </summary>
        </member>
        <member name="F:Neo4j.Driver.QueryType.SchemaWrite">
            <summary>
            The query is a schemawrite query
            </summary>
        </member>
        <member name="T:Neo4j.Driver.TransactionConfig">
            <summary>
            Configuration object containing settings for explicit and auto-commit transactions.
            Leave the fields unmodified to use server side transaction configurations.
            <para/>
            For example, the following code starts a transaction using server default transaction configurations.
            <code>
            session.BeginTransaction(b=>{});
            </code>
            </summary>
        </member>
        <member name="P:Neo4j.Driver.TransactionConfig.Timeout">
            <summary>
            Transaction timeout.
            Transactions that execute longer than the configured timeout will be terminated by the database.
            This functionality allows to limit query/transaction execution time.
            Specified timeout overrides the default timeout configured in the database using <code>dbms.transaction.timeout</code> setting.
            Leave this field unmodified to use default timeout configured on database.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">If the value given to transaction timeout in milliseconds is less or equal to zero</exception>
        </member>
        <member name="P:Neo4j.Driver.TransactionConfig.Metadata">
            <summary>
            The transaction metadata.
            Specified metadata will be attached to the executing transaction and visible in the output of <code>dbms.listQueries</code>
            and <code>dbms.listTransactions</code> procedures. It will also get logged to the <code>query.log</code>.
            Transactions starting with this <see cref="T:Neo4j.Driver.TransactionConfig"/>
            This functionality makes it easier to tag transactions and is equivalent to <code>dbms.setTXMetaData</code> procedure.
            Leave this field unmodified to use default timeout configured on database.
            </summary>
        </member>
        <member name="M:Neo4j.Driver.TransactionConfig.ToString">
            <summary>
            Returns the config content in a nice string representation.
            </summary>
            <returns>The content of the transaction config in a string.</returns>
        </member>
        <member name="T:Neo4j.Driver.TransactionConfigBuilder">
            <summary>
            The builder to create a <see cref="T:Neo4j.Driver.TransactionConfig"/>
            </summary>
        </member>
        <member name="M:Neo4j.Driver.TransactionConfigBuilder.WithTimeout(System.TimeSpan)">
            <summary>
            Sets the transaction timeout.
            Transactions that execute longer than the configured timeout will be terminated by the database.
            This functionality allows to limit query/transaction execution time.
            Specified timeout overrides the default timeout configured in the database using <code>dbms.transaction.timeout</code> setting.
            Leave this field unmodified to use default timeout configured on database.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">If the value given to transaction timeout in milliseconds is less or equal to zero</exception>
            <param name="timeout">the new timeout</param>
            <returns>this <see cref="T:Neo4j.Driver.TransactionConfigBuilder"/> instance</returns>
        </member>
        <member name="M:Neo4j.Driver.TransactionConfigBuilder.WithMetadata(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            The transaction metadata.
            Specified metadata will be attached to the executing transaction and visible in the output of <code>dbms.listQueries</code>
            and <code>dbms.listTransactions</code> procedures. It will also get logged to the <code>query.log</code>.
            Transactions starting with this <see cref="T:Neo4j.Driver.TransactionConfig"/>
            This functionality makes it easier to tag transactions and is equivalent to <code>dbms.setTXMetaData</code> procedure.
            Leave this field unmodified to use default timeout configured on database.
            </summary>
            <param name="metadata">the metadata to set on transaction</param>
            <returns>this <see cref="T:Neo4j.Driver.TransactionConfigBuilder"/> instance</returns>
        </member>
        <member name="T:Neo4j.Driver.TrustManager">
            <summary>
            This is the base class all built-in or custom trust manager implementations should be inheriting from. Trust managers
            are the way that one could customise how TLS trust is established.
            </summary>
        </member>
        <member name="M:Neo4j.Driver.TrustManager.ValidateServerCertificate(System.Uri,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            Returns whether the endpoint should be trusted or not.
            </summary>
            <param name="uri">The uri towards which we're establishing connection</param>
            <param name="certificate">The certificate presented by the other endpoint</param>
            <param name="chain">The certificate chain that was built during the handshake</param>
            <param name="sslPolicyErrors">The initial policy errors that shows what problems were detected during the handshake</param>
            <returns><value>true</value> if the connection should be established, <value>false</value> otherwise</returns>
        </member>
        <member name="M:Neo4j.Driver.TrustManager.CreateInsecure">
            <summary>
            Creates an insecure trust manager that trusts any certificate it is presented, but does hostname verification.
            </summary>
            <returns>An instance of <see cref="T:Neo4j.Driver.TrustManager"/></returns>
        </member>
        <member name="M:Neo4j.Driver.TrustManager.CreateInsecure(System.Boolean)">
            <summary>
            Creates an insecure trust manager that trusts any certificate it is presented with configurable hostname verification.
            </summary>
            <param name="verifyHostname">Whether to perform hostname verification</param>
            <returns>An instance of <see cref="T:Neo4j.Driver.TrustManager"/></returns>
        </member>
        <member name="M:Neo4j.Driver.TrustManager.CreateChainTrust">
            <summary>
            Creates a trust manager that establishes trust based on system certificate stores.
            </summary>
            <returns>An instance of <see cref="T:Neo4j.Driver.TrustManager"/></returns>
        </member>
        <member name="M:Neo4j.Driver.TrustManager.CreateChainTrust(System.Boolean)">
            <summary>
            Creates a trust manager that establishes trust based on system certificate stores with configurable hostname
            verification.
            </summary>
            <param name="verifyHostname">Whether to perform hostname verification</param>
            <returns>An instance of <see cref="T:Neo4j.Driver.TrustManager"/></returns>
        </member>
        <member name="M:Neo4j.Driver.TrustManager.CreateChainTrust(System.Boolean,System.Security.Cryptography.X509Certificates.X509RevocationMode,System.Security.Cryptography.X509Certificates.X509RevocationFlag,System.Boolean)">
            <summary>
            Creates a trust manager that establishes trust based on system certificate stores with configurable hostname
            verification, revocation checks.
            </summary>
            <param name="verifyHostname">Whether to perform hostname verification</param>
            <param name="revocationMode">The revocation check mode</param>
            <param name="revocationFlag">How should the revocation check should behave</param>
            <param name="useMachineContext">Whether to use machine context instead of user's for certificate stores</param>
            <returns>An instance of <see cref="T:Neo4j.Driver.TrustManager"/></returns>
        </member>
        <member name="M:Neo4j.Driver.TrustManager.CreatePeerTrust">
            <summary>
            Creates a trust manager that establishes trust based on TrustedPeople system certificate store.
            </summary>
            <returns>An instance of <see cref="T:Neo4j.Driver.TrustManager"/></returns>
        </member>
        <member name="M:Neo4j.Driver.TrustManager.CreatePeerTrust(System.Boolean)">
            <summary>
            Creates a trust manager that establishes trust based on TrustedPeople system certificate store with configurable
            hostname verification.
            </summary>
            <param name="verifyHostname">Whether to perform hostname verification</param>
            <returns>An instance of <see cref="T:Neo4j.Driver.TrustManager"/></returns>
        </member>
        <member name="M:Neo4j.Driver.TrustManager.CreatePeerTrust(System.Boolean,System.Boolean)">
            <summary>
            Creates a trust manager that establishes trust based on TrustedPeople system certificate store with configurable
            hostname verification.
            </summary>
            <param name="verifyHostname">Whether to perform hostname verification</param>
            <param name="useMachineContext">Whether to use machine context instead of user's for certificate stores</param>
            <returns>An instance of <see cref="T:Neo4j.Driver.TrustManager"/></returns>
        </member>
        <member name="M:Neo4j.Driver.TrustManager.CreateCertTrust(System.Collections.Generic.IEnumerable{System.Security.Cryptography.X509Certificates.X509Certificate2})">
            <summary>
            Creates a trust manager that establishes trust based on provided list of trusted certificates.
            </summary>
            <param name="trusted">List of trusted certificates</param>
            <returns>An instance of <see cref="T:Neo4j.Driver.TrustManager"/></returns>
        </member>
        <member name="M:Neo4j.Driver.TrustManager.CreateCertTrust(System.Collections.Generic.IEnumerable{System.Security.Cryptography.X509Certificates.X509Certificate2},System.Boolean)">
            <summary>
            Creates a trust manager that establishes trust based on provided list of trusted certificates with configurable
            hostname verification.
            </summary>
            <param name="trusted">List of trusted certificates</param>
            <param name="verifyHostname">Whether to perform hostname verification</param>
            <returns>An instance of <see cref="T:Neo4j.Driver.TrustManager"/></returns>
        </member>
        <member name="T:Neo4j.Driver.Duration">
            <summary>
            Represents temporal amount containing months, days, seconds and nanoseconds. 
            <remarks>A duration can hold a negative value.</remarks>
            </summary>
        </member>
        <member name="F:Neo4j.Driver.Duration.Comparer">
            <summary>
            Default comparer for <see cref="T:Neo4j.Driver.Duration"/> values.
            </summary>
        </member>
        <member name="M:Neo4j.Driver.Duration.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of <see cref="T:Neo4j.Driver.Duration" /> in terms of <see cref="P:Neo4j.Driver.Duration.Seconds"/>
            </summary>
            <param name="seconds"><see cref="P:Neo4j.Driver.Duration.Seconds"/></param>
        </member>
        <member name="M:Neo4j.Driver.Duration.#ctor(System.Int64,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Neo4j.Driver.Duration" /> in terms of <see cref="P:Neo4j.Driver.Duration.Seconds"/> 
            and <see cref="P:Neo4j.Driver.Duration.Nanos"/>
            </summary>
            <param name="seconds"><see cref="P:Neo4j.Driver.Duration.Seconds"/></param>
            <param name="nanos"><see cref="P:Neo4j.Driver.Duration.Nanos"/></param>
        </member>
        <member name="M:Neo4j.Driver.Duration.#ctor(System.Int64,System.Int64,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Neo4j.Driver.Duration" /> in terms of <see cref="P:Neo4j.Driver.Duration.Days"/>, 
            <see cref="P:Neo4j.Driver.Duration.Seconds"/> and <see cref="P:Neo4j.Driver.Duration.Nanos"/>
            </summary>
            <param name="days"><see cref="P:Neo4j.Driver.Duration.Days"/></param>
            <param name="seconds"><see cref="P:Neo4j.Driver.Duration.Seconds"/></param>
            <param name="nanos"><see cref="P:Neo4j.Driver.Duration.Nanos"/></param>
        </member>
        <member name="M:Neo4j.Driver.Duration.#ctor(System.Int64,System.Int64,System.Int64,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Neo4j.Driver.Duration" /> with all supported temporal fields
            </summary>
            <param name="months"><see cref="P:Neo4j.Driver.Duration.Months"/></param>
            <param name="days"><see cref="P:Neo4j.Driver.Duration.Days"/></param>
            <param name="seconds"><see cref="P:Neo4j.Driver.Duration.Seconds"/></param>
            <param name="nanos"><see cref="P:Neo4j.Driver.Duration.Nanos"/></param>
        </member>
        <member name="P:Neo4j.Driver.Duration.Months">
            <summary>
            The number of months in this duration.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.Duration.Days">
            <summary>
            The number of days in this duration.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.Duration.Seconds">
            <summary>
            The number of seconds in this duration.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.Duration.Nanos">
            <summary>
            The number of nanoseconds in this duration.
            </summary>
        </member>
        <member name="M:Neo4j.Driver.Duration.Equals(Neo4j.Driver.Duration)">
            <summary>
            Returns a value indicating whether the value of this instance is equal to the 
            value of the specified <see cref="T:Neo4j.Driver.Duration"/> instance. 
            </summary>
            <param name="other">The object to compare to this instance.</param>
            <returns><code>true</code> if the <code>value</code> parameter equals the value of 
            this instance; otherwise, <code>false</code></returns>
        </member>
        <member name="M:Neo4j.Driver.Duration.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="obj">The object to compare to this instance.</param>
            <returns><code>true</code> if <code>value</code> is an instance of <see cref="T:Neo4j.Driver.Duration"/> and 
            equals the value of this instance; otherwise, <code>false</code></returns>
        </member>
        <member name="M:Neo4j.Driver.Duration.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Neo4j.Driver.Duration.ToString">
            <summary>
            Converts the value of the current <see cref="T:Neo4j.Driver.Duration"/> object to its equivalent string representation.
            </summary>
            <returns>String representation of this Point.</returns>
        </member>
        <member name="M:Neo4j.Driver.Duration.CompareTo(Neo4j.Driver.Duration)">
            <summary>
            Compares the value of this instance to a specified <see cref="T:Neo4j.Driver.Duration"/> value and returns an integer 
            that indicates whether this instance is earlier than, the same as, or later than the specified 
            DateTime value.
            </summary>
            <param name="other">The object to compare to the current instance.</param>
            <returns>A signed number indicating the relative values of this instance and the value parameter.</returns>
        </member>
        <member name="M:Neo4j.Driver.Duration.CompareTo(System.Object)">
            <summary>
            Compares the value of this instance to a specified object which is expected to be a <see cref="T:Neo4j.Driver.Duration"/>
            value, and returns an integer that indicates whether this instance is earlier than, the same as, 
            or later than the specified <see cref="T:Neo4j.Driver.Duration"/> value.
            </summary>
            <param name="obj">The object to compare to the current instance.</param>
            <returns>A signed number indicating the relative values of this instance and the value parameter.</returns>
        </member>
        <member name="M:Neo4j.Driver.Duration.op_LessThan(Neo4j.Driver.Duration,Neo4j.Driver.Duration)">
            <summary>
            Determines whether one specified <see cref="T:Neo4j.Driver.Duration"/> is less than another specified 
            <see cref="T:Neo4j.Driver.Duration"/>.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns><code>true</code> if one is less than another, otherwise <code>false</code>.</returns>
        </member>
        <member name="M:Neo4j.Driver.Duration.op_GreaterThan(Neo4j.Driver.Duration,Neo4j.Driver.Duration)">
            <summary>
            Determines whether one specified <see cref="T:Neo4j.Driver.Duration"/> is more than another specified 
            <see cref="T:Neo4j.Driver.Duration"/>.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns><code>true</code> if one is greater than another, otherwise <code>false</code>.</returns>
        </member>
        <member name="M:Neo4j.Driver.Duration.op_LessThanOrEqual(Neo4j.Driver.Duration,Neo4j.Driver.Duration)">
            <summary>
            Determines whether one specified <see cref="T:Neo4j.Driver.Duration"/> represents a duration that is the 
            same as or more than the other specified <see cref="T:Neo4j.Driver.Duration"/> 
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns><code>true</code> if one is less than and equal to another, otherwise <code>false</code>. </returns>
        </member>
        <member name="M:Neo4j.Driver.Duration.op_GreaterThanOrEqual(Neo4j.Driver.Duration,Neo4j.Driver.Duration)">
            <summary>
            Determines whether one specified <see cref="T:Neo4j.Driver.Duration"/> represents a duration that is the 
            same as or less than the other specified <see cref="T:Neo4j.Driver.Duration"/> 
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns><code>true</code> if one is greater and equal to another, otherwise <code>false</code>.</returns>
        </member>
        <member name="T:Neo4j.Driver.IEntity">
            <summary>
            Represents an <c>Entity</c> in the Neo4j graph database. An <c>Entity</c> could be a <c>Node</c> or a <c>Relationship</c>.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.IEntity.Item(System.String)">
            <summary>
            Gets the value that has the specified key in <see cref="P:Neo4j.Driver.IEntity.Properties"/>.
            </summary>
            <param name="key">The key.</param>
            <returns>The value specified by the given key in <see cref="P:Neo4j.Driver.IEntity.Properties"/>.</returns>
        </member>
        <member name="P:Neo4j.Driver.IEntity.Properties">
            <summary>
            Gets the properties of the entity.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.IEntity.Id">
            <summary>
            Get the identity as a <see cref="T:System.Int64"/> number.
            </summary>
        </member>
        <member name="T:Neo4j.Driver.INode">
            <summary>
            Represents a <c>Node</c> in the Neo4j graph database.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.INode.Labels">
            <summary>
            Gets the lables of the node.
            </summary>
        </member>
        <member name="T:Neo4j.Driver.IPath">
            <summary>
                A <c>Path</c> is a directed sequence of relationships between two nodes. This generally
                represents a <em>traversal</em> or <em>walk</em> through a graph and maintains a direction separate
                from that of any relationships traversed.
                It is allowed to be of size 0, meaning there are no relationships in it. In this case,
                it contains only a single node which is both the start and the end of the path.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.IPath.Start">
            <summary>
            Gets the start <see cref="T:Neo4j.Driver.INode"/> in the path.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.IPath.End">
            <summary>
            Gets the end <see cref="T:Neo4j.Driver.INode"/> in the path.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.IPath.Nodes">
            <summary>
            Gets all the nodes in the path.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.IPath.Relationships">
            <summary>
            Gets all the relationships in the path.
            </summary>
        </member>
        <member name="T:Neo4j.Driver.IRelationship">
            <summary>
            Represents a <c>Relationship</c> in the Neo4j graph database.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.IRelationship.Type">
            <summary>
            Gets the type of the relationship.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.IRelationship.StartNodeId">
            <summary>
            Gets the id of the start node of the relationship.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.IRelationship.EndNodeId">
            <summary>
            Gets the id of the end node of the relationship.
            </summary>
        </member>
        <member name="T:Neo4j.Driver.LocalDate">
            <summary>
            Represents a date value, without a time zone and time related components
            </summary>
        </member>
        <member name="F:Neo4j.Driver.LocalDate.Comparer">
            <summary>
            Default comparer for <see cref="T:Neo4j.Driver.LocalDate"/> values.
            </summary>
        </member>
        <member name="M:Neo4j.Driver.LocalDate.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of <see cref="T:Neo4j.Driver.LocalDate"/> from a date value
            </summary>
            <param name="date"></param>
        </member>
        <member name="M:Neo4j.Driver.LocalDate.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Neo4j.Driver.LocalDate"/> from individual date component values
            </summary>
            <param name="year"></param>
            <param name="month"></param>
            <param name="day"></param>
        </member>
        <member name="P:Neo4j.Driver.LocalDate.Year">
            <summary>
            Gets the year component of this instance.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.LocalDate.Month">
            <summary>
            Gets the month component of this instance.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.LocalDate.Day">
            <summary>
            Gets the day of month component of this instance.
            </summary>
        </member>
        <member name="M:Neo4j.Driver.LocalDate.ToDateTime">
            <summary>
            Converts this date value to a <see cref="T:System.DateTime"/> instance.
            </summary>
            <value>Equivalent <see cref="T:System.DateTime"/> value</value>
            <exception cref="T:Neo4j.Driver.ValueOverflowException">If the value cannot be represented with DateTime</exception>
            <returns>A <see cref="T:System.DateTime"/> instance.</returns>
        </member>
        <member name="M:Neo4j.Driver.LocalDate.Equals(Neo4j.Driver.LocalDate)">
            <summary>
            Returns a value indicating whether the value of this instance is equal to the 
            value of the specified <see cref="T:Neo4j.Driver.LocalDate"/> instance. 
            </summary>
            <param name="other">The object to compare to this instance.</param>
            <returns><code>true</code> if the <code>value</code> parameter equals the value of 
            this instance; otherwise, <code>false</code></returns>
        </member>
        <member name="M:Neo4j.Driver.LocalDate.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="obj">The object to compare to this instance.</param>
            <returns><code>true</code> if <code>value</code> is an instance of <see cref="T:Neo4j.Driver.LocalDate"/> and 
            equals the value of this instance; otherwise, <code>false</code></returns>
        </member>
        <member name="M:Neo4j.Driver.LocalDate.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Neo4j.Driver.LocalDate.ToString">
            <summary>
            Converts the value of the current <see cref="T:Neo4j.Driver.LocalDate"/> object to its equivalent string representation.
            </summary>
            <returns>String representation of this Point.</returns>
        </member>
        <member name="M:Neo4j.Driver.LocalDate.CompareTo(Neo4j.Driver.LocalDate)">
            <summary>
            Compares the value of this instance to a specified <see cref="T:Neo4j.Driver.LocalDate"/> value and returns an integer 
            that indicates whether this instance is earlier than, the same as, or later than the specified 
            DateTime value.
            </summary>
            <param name="other">The object to compare to the current instance.</param>
            <returns>A signed number indicating the relative values of this instance and the value parameter.</returns>
        </member>
        <member name="M:Neo4j.Driver.LocalDate.CompareTo(System.Object)">
            <summary>
            Compares the value of this instance to a specified object which is expected to be a <see cref="T:Neo4j.Driver.LocalDate"/>
            value, and returns an integer that indicates whether this instance is earlier than, the same as, 
            or later than the specified <see cref="T:Neo4j.Driver.LocalDate"/> value.
            </summary>
            <param name="obj">The object to compare to the current instance.</param>
            <returns>A signed number indicating the relative values of this instance and the value parameter.</returns>
        </member>
        <member name="M:Neo4j.Driver.LocalDate.op_LessThan(Neo4j.Driver.LocalDate,Neo4j.Driver.LocalDate)">
            <summary>
            Determines whether one specified <see cref="T:Neo4j.Driver.LocalDate"/> is earlier than another specified 
            <see cref="T:Neo4j.Driver.LocalDate"/>.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns><code>true</code> if one is earlier than another, otherwise <code>false</code>.</returns>
        </member>
        <member name="M:Neo4j.Driver.LocalDate.op_GreaterThan(Neo4j.Driver.LocalDate,Neo4j.Driver.LocalDate)">
            <summary>
            Determines whether one specified <see cref="T:Neo4j.Driver.LocalDate"/> is later than another specified 
            <see cref="T:Neo4j.Driver.LocalDate"/>.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns><code>true</code> if one is later than another, otherwise <code>false</code>.</returns>
        </member>
        <member name="M:Neo4j.Driver.LocalDate.op_LessThanOrEqual(Neo4j.Driver.LocalDate,Neo4j.Driver.LocalDate)">
            <summary>
            Determines whether one specified <see cref="T:Neo4j.Driver.LocalDate"/> represents a duration that is the 
            same as or later than the other specified <see cref="T:Neo4j.Driver.LocalDate"/> 
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns><code>true</code> if one is the same as or later than another.</returns>
        </member>
        <member name="M:Neo4j.Driver.LocalDate.op_GreaterThanOrEqual(Neo4j.Driver.LocalDate,Neo4j.Driver.LocalDate)">
            <summary>
            Determines whether one specified <see cref="T:Neo4j.Driver.LocalDate"/> represents a duration that is the 
            same as or earlier than the other specified <see cref="T:Neo4j.Driver.LocalDate"/> 
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns><code>true</code> if one is the same or earlier than another, otherwise <code>false</code>.</returns>
        </member>
        <member name="M:Neo4j.Driver.LocalDate.ConvertToDateTime">
            <inheritdoc cref="M:Neo4j.Driver.TemporalValue.ConvertToDateTime"/>
        </member>
        <member name="T:Neo4j.Driver.LocalDateTime">
            <summary>
            Represents a local date time value, without a time zone
            </summary>
        </member>
        <member name="F:Neo4j.Driver.LocalDateTime.Comparer">
            <summary>
            Default comparer for <see cref="T:Neo4j.Driver.LocalDateTime"/> values.
            </summary>
        </member>
        <member name="M:Neo4j.Driver.LocalDateTime.#ctor(System.DateTime)">
             <summary>
             Initializes a new instance of <see cref="T:Neo4j.Driver.LocalDateTime"/> from given <see cref="T:System.DateTime"/> value.
             </summary>
            
             <remarks>
             The value of <see cref="P:System.DateTime.Kind"/> has no effect. Date and time component values will be used without any
             explicit conversions (i.e. we treat <see cref="P:System.DateTime.Kind"/> as if <see cref="F:System.DateTimeKind.Local"/>).
             </remarks>
             <param name="dateTime"></param>
        </member>
        <member name="M:Neo4j.Driver.LocalDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Neo4j.Driver.LocalDateTime"/> from individual date time
            component values
            </summary>
            <param name="year"></param>
            <param name="month"></param>
            <param name="day"></param>
            <param name="hour"></param>
            <param name="minute"></param>
            <param name="second"></param>
        </member>
        <member name="M:Neo4j.Driver.LocalDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Neo4j.Driver.LocalDateTime"/> from individual date time
            </summary>
            <param name="year"></param>
            <param name="month"></param>
            <param name="day"></param>
            <param name="hour"></param>
            <param name="minute"></param>
            <param name="second"></param>
            <param name="nanosecond"></param>
        </member>
        <member name="P:Neo4j.Driver.LocalDateTime.Year">
            <summary>
            Gets the year component of this instance.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.LocalDateTime.Month">
            <summary>
            Gets the month component of this instance.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.LocalDateTime.Day">
            <summary>
            Gets the day of month component of this instance.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.LocalDateTime.Hour">
            <summary>
            Gets the hour component of this instance.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.LocalDateTime.Minute">
            <summary>
            Gets the minute component of this instance.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.LocalDateTime.Second">
            <summary>
            Gets the second component of this instance.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.LocalDateTime.Nanosecond">
            <summary>
            Gets the nanosecond component of this instance.
            </summary>
        </member>
        <member name="M:Neo4j.Driver.LocalDateTime.ToDateTime">
            <summary>
            Converts this date value to a <see cref="T:System.DateTime"/> instance.
            </summary>
            <value>Equivalent <see cref="T:System.DateTime"/> value</value>
            <exception cref="T:Neo4j.Driver.ValueOverflowException">If the value cannot be represented with DateTime</exception>
            <exception cref="T:Neo4j.Driver.ValueTruncationException">If a truncation occurs during conversion</exception>
            <returns>A <see cref="T:System.DateTime"/> instance.</returns>
        </member>
        <member name="M:Neo4j.Driver.LocalDateTime.Equals(Neo4j.Driver.LocalDateTime)">
            <summary>
            Returns a value indicating whether the value of this instance is equal to the 
            value of the specified <see cref="T:Neo4j.Driver.LocalDateTime"/> instance. 
            </summary>
            <param name="other">The object to compare to this instance.</param>
            <returns><code>true</code> if the <code>value</code> parameter equals the value of 
            this instance; otherwise, <code>false</code></returns>
        </member>
        <member name="M:Neo4j.Driver.LocalDateTime.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="obj">The object to compare to this instance.</param>
            <returns><code>true</code> if <code>value</code> is an instance of <see cref="T:Neo4j.Driver.LocalDateTime"/> and 
            equals the value of this instance; otherwise, <code>false</code></returns>
        </member>
        <member name="M:Neo4j.Driver.LocalDateTime.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Neo4j.Driver.LocalDateTime.ToString">
            <summary>
            Converts the value of the current <see cref="T:Neo4j.Driver.LocalDateTime"/> object to its equivalent string representation.
            </summary>
            <returns>String representation of this Point.</returns>
        </member>
        <member name="M:Neo4j.Driver.LocalDateTime.CompareTo(Neo4j.Driver.LocalDateTime)">
            <summary>
            Compares the value of this instance to a specified <see cref="T:Neo4j.Driver.LocalDateTime"/> value and returns an integer 
            that indicates whether this instance is earlier than, the same as, or later than the specified 
            DateTime value.
            </summary>
            <param name="other">The object to compare to the current instance.</param>
            <returns>A signed number indicating the relative values of this instance and the value parameter.</returns>
        </member>
        <member name="M:Neo4j.Driver.LocalDateTime.CompareTo(System.Object)">
            <summary>
            Compares the value of this instance to a specified object which is expected to be a <see cref="T:Neo4j.Driver.LocalDateTime"/>
            value, and returns an integer that indicates whether this instance is earlier than, the same as, 
            or later than the specified <see cref="T:Neo4j.Driver.LocalDateTime"/> value.
            </summary>
            <param name="obj">The object to compare to the current instance.</param>
            <returns>A signed number indicating the relative values of this instance and the value parameter.</returns>
        </member>
        <member name="M:Neo4j.Driver.LocalDateTime.op_LessThan(Neo4j.Driver.LocalDateTime,Neo4j.Driver.LocalDateTime)">
            <summary>
            Determines whether one specified <see cref="T:Neo4j.Driver.LocalDateTime"/> is earlier than another specified 
            <see cref="T:Neo4j.Driver.LocalDateTime"/>.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns><code>true</code> if one is earlier than another, otherwise <code>false</code>.</returns>
        </member>
        <member name="M:Neo4j.Driver.LocalDateTime.op_GreaterThan(Neo4j.Driver.LocalDateTime,Neo4j.Driver.LocalDateTime)">
            <summary>
            Determines whether one specified <see cref="T:Neo4j.Driver.LocalDateTime"/> is later than another specified 
            <see cref="T:Neo4j.Driver.LocalDateTime"/>.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns><code>true</code> if one is later than another, otherwise <code>false</code>.</returns>
        </member>
        <member name="M:Neo4j.Driver.LocalDateTime.op_LessThanOrEqual(Neo4j.Driver.LocalDateTime,Neo4j.Driver.LocalDateTime)">
            <summary>
            Determines whether one specified <see cref="T:Neo4j.Driver.LocalDateTime"/> represents a duration that is the 
            same as or later than the other specified <see cref="T:Neo4j.Driver.LocalDateTime"/> 
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns><code>true</code> if one is the same as or later than another, otherwise <code>false</code>.</returns>
        </member>
        <member name="M:Neo4j.Driver.LocalDateTime.op_GreaterThanOrEqual(Neo4j.Driver.LocalDateTime,Neo4j.Driver.LocalDateTime)">
            <summary>
            Determines whether one specified <see cref="T:Neo4j.Driver.LocalDateTime"/> represents a duration that is the 
            same as or earlier than the other specified <see cref="T:Neo4j.Driver.LocalDateTime"/> 
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns><code>true</code> if one is the same as or earlier than another, otherwise <code>false</code>.</returns>
        </member>
        <member name="M:Neo4j.Driver.LocalDateTime.ConvertToDateTime">
            <inheritdoc cref="M:Neo4j.Driver.TemporalValue.ConvertToDateTime"/>
        </member>
        <member name="T:Neo4j.Driver.LocalTime">
            <summary>
            Represents a local time value
            </summary>
        </member>
        <member name="F:Neo4j.Driver.LocalTime.Comparer">
            <summary>
            Default comparer for <see cref="T:Neo4j.Driver.LocalTime"/> values.
            </summary>
        </member>
        <member name="M:Neo4j.Driver.LocalTime.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of <see cref="T:Neo4j.Driver.LocalTime"/> from time components of given <see cref="T:System.DateTime"/>
            </summary>
            <param name="time"></param>
        </member>
        <member name="M:Neo4j.Driver.LocalTime.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of <see cref="T:Neo4j.Driver.LocalTime"/> from given <see cref="T:System.TimeSpan"/> value
            </summary>
            <param name="time"></param>
        </member>
        <member name="M:Neo4j.Driver.LocalTime.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Neo4j.Driver.LocalTime"/> from individual time components
            </summary>
            <param name="hour"></param>
            <param name="minute"></param>
            <param name="second"></param>
        </member>
        <member name="M:Neo4j.Driver.LocalTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Neo4j.Driver.LocalTime"/> from individual time components
            </summary>
            <param name="hour"></param>
            <param name="minute"></param>
            <param name="second"></param>
            <param name="nanosecond"></param>
        </member>
        <member name="P:Neo4j.Driver.LocalTime.Hour">
            <summary>
            Gets the hour component of this instance.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.LocalTime.Minute">
            <summary>
            Gets the minute component of this instance.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.LocalTime.Second">
            <summary>
            Gets the second component of this instance.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.LocalTime.Nanosecond">
            <summary>
            Gets the nanosecond component of this instance.
            </summary>
        </member>
        <member name="M:Neo4j.Driver.LocalTime.ToTimeSpan">
            <summary>
            Converts this time value to a <see cref="T:System.TimeSpan"/> instance.
            </summary>
            <value>Equivalent <see cref="T:System.TimeSpan"/> value</value>
            <exception cref="T:Neo4j.Driver.ValueTruncationException">If a truncation occurs during conversion</exception>
            <returns>A <see cref="T:System.TimeSpan"/> instance.</returns>
        </member>
        <member name="M:Neo4j.Driver.LocalTime.Equals(Neo4j.Driver.LocalTime)">
            <summary>
            Returns a value indicating whether the value of this instance is equal to the 
            value of the specified <see cref="T:Neo4j.Driver.LocalTime" /> instance. 
            </summary>
            <param name="other">The object to compare to this instance.</param>
            <returns><code>true</code> if the <code>value</code> parameter equals the value of 
            this instance; otherwise, <code>false</code></returns>
        </member>
        <member name="M:Neo4j.Driver.LocalTime.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="obj">The object to compare to this instance.</param>
            <returns><code>true</code> if <code>value</code> is an instance of <see cref="T:Neo4j.Driver.LocalTime"/> and 
            equals the value of this instance; otherwise, <code>false</code></returns>
        </member>
        <member name="M:Neo4j.Driver.LocalTime.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Neo4j.Driver.LocalTime.ToString">
            <summary>
            Converts the value of the current <see cref="T:Neo4j.Driver.LocalTime"/> object to its equivalent string representation.
            </summary>
            <returns>String representation of this Point.</returns>
        </member>
        <member name="M:Neo4j.Driver.LocalTime.CompareTo(Neo4j.Driver.LocalTime)">
            <summary>
            Compares the value of this instance to a specified <see cref="T:Neo4j.Driver.LocalTime"/> value and returns an integer 
            that indicates whether this instance is earlier than, the same as, or later than the specified 
            DateTime value.
            </summary>
            <param name="other">The object to compare to the current instance.</param>
            <returns>A signed number indicating the relative values of this instance and the value parameter.</returns>
        </member>
        <member name="M:Neo4j.Driver.LocalTime.CompareTo(System.Object)">
            <summary>
            Compares the value of this instance to a specified object which is expected to be a <see cref="T:Neo4j.Driver.LocalTime"/>
            value, and returns an integer that indicates whether this instance is earlier than, the same as, 
            or later than the specified <see cref="T:Neo4j.Driver.LocalTime"/> value.
            </summary>
            <param name="obj">The object to compare to the current instance.</param>
            <returns>A signed number indicating the relative values of this instance and the value parameter.</returns>
        </member>
        <member name="M:Neo4j.Driver.LocalTime.op_LessThan(Neo4j.Driver.LocalTime,Neo4j.Driver.LocalTime)">
            <summary>
            Determines whether one specified <see cref="T:Neo4j.Driver.LocalTime"/> is earlier than another specified 
            <see cref="T:Neo4j.Driver.LocalTime"/>.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns><code>true</code>if one is earlier than another, otherwise <code>false</code>.</returns>
        </member>
        <member name="M:Neo4j.Driver.LocalTime.op_GreaterThan(Neo4j.Driver.LocalTime,Neo4j.Driver.LocalTime)">
            <summary>
            Determines whether one specified <see cref="T:Neo4j.Driver.LocalTime"/> is later than another specified 
            <see cref="T:Neo4j.Driver.LocalTime"/>.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns><code>true</code> if one is later than another, otherwise <code>false</code>.</returns>
        </member>
        <member name="M:Neo4j.Driver.LocalTime.op_LessThanOrEqual(Neo4j.Driver.LocalTime,Neo4j.Driver.LocalTime)">
            <summary>
            Determines whether one specified <see cref="T:Neo4j.Driver.LocalTime"/> represents a duration that is the 
            same as or later than the other specified <see cref="T:Neo4j.Driver.LocalTime"/> 
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns><code>true</code> if one is the same as or later than another, otherwise <code>false</code>.</returns>
        </member>
        <member name="M:Neo4j.Driver.LocalTime.op_GreaterThanOrEqual(Neo4j.Driver.LocalTime,Neo4j.Driver.LocalTime)">
            <summary>
            Determines whether one specified <see cref="T:Neo4j.Driver.LocalTime"/> represents a duration that is the 
            same as or earlier than the other specified <see cref="T:Neo4j.Driver.LocalTime"/> 
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns><code>true</code> if one is the same as or later than another, otherwise <code>false</code>.</returns>
        </member>
        <member name="M:Neo4j.Driver.LocalTime.ConvertToDateTime">
            <inheritdoc cref="M:Neo4j.Driver.TemporalValue.ConvertToDateTime"/>
        </member>
        <member name="M:Neo4j.Driver.LocalTime.ConvertToTimeSpan">
            <inheritdoc cref="M:Neo4j.Driver.TemporalValue.ConvertToTimeSpan"/>
        </member>
        <member name="T:Neo4j.Driver.OffsetTime">
            <summary>
            Represents a time value with a UTC offset
            </summary>
        </member>
        <member name="F:Neo4j.Driver.OffsetTime.Comparer">
            <summary>
            Default comparer for <see cref="T:Neo4j.Driver.OffsetTime"/> values.
            </summary>
        </member>
        <member name="M:Neo4j.Driver.OffsetTime.#ctor(System.DateTime,System.TimeSpan)">
            <summary>
            Initializes a new instance of <see cref="T:Neo4j.Driver.OffsetTime"/> from time components of given <see cref="T:System.DateTime"/> value
            </summary>
            <param name="time"></param>
            <param name="offset"></param>
        </member>
        <member name="M:Neo4j.Driver.OffsetTime.#ctor(System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of <see cref="T:Neo4j.Driver.OffsetTime"/> from given <see cref="T:System.TimeSpan"/> value
            </summary>
            <param name="time"></param>
            <param name="offset"></param>
        </member>
        <member name="M:Neo4j.Driver.OffsetTime.#ctor(System.TimeSpan,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Neo4j.Driver.OffsetTime"/> from given <see cref="T:System.TimeSpan"/> value
            </summary>
            <param name="time"></param>
            <param name="offsetSeconds"></param>
        </member>
        <member name="M:Neo4j.Driver.OffsetTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Neo4j.Driver.OffsetTime"/> from individual time components
            </summary>
            <param name="hour"></param>
            <param name="minute"></param>
            <param name="second"></param>
            <param name="offsetSeconds"></param>
        </member>
        <member name="M:Neo4j.Driver.OffsetTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Neo4j.Driver.OffsetTime"/> from individual time components
            </summary>
            <param name="hour"></param>
            <param name="minute"></param>
            <param name="second"></param>
            <param name="nanosecond"></param>
            <param name="offsetSeconds"></param>
        </member>
        <member name="P:Neo4j.Driver.OffsetTime.Hour">
            <summary>
            Gets the hour component of this instance.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.OffsetTime.Minute">
            <summary>
            Gets the minute component of this instance.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.OffsetTime.Second">
            <summary>
            Gets the second component of this instance.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.OffsetTime.Nanosecond">
            <summary>
            Gets the nanosecond component of this instance.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.OffsetTime.OffsetSeconds">
            <summary>
            Offset in seconds precision
            </summary>
        </member>
        <member name="M:Neo4j.Driver.OffsetTime.Equals(Neo4j.Driver.OffsetTime)">
            <summary>
            Returns a value indicating whether the value of this instance is equal to the 
            value of the specified <see cref="T:Neo4j.Driver.OffsetTime" /> instance. 
            </summary>
            <param name="other">The object to compare to this instance.</param>
            <returns><code>true</code> if the <code>value</code> parameter equals the value of 
            this instance; otherwise, <code>false</code></returns>
        </member>
        <member name="M:Neo4j.Driver.OffsetTime.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="obj">The object to compare to this instance.</param>
            <returns><code>true</code> if <code>value</code> is an instance of <see cref="T:Neo4j.Driver.OffsetTime"/> and 
            equals the value of this instance; otherwise, <code>false</code></returns>
        </member>
        <member name="M:Neo4j.Driver.OffsetTime.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Neo4j.Driver.OffsetTime.ToString">
            <summary>
            Converts the value of the current <see cref="T:Neo4j.Driver.OffsetTime"/> object to its equivalent string representation.
            </summary>
            <returns>String representation of this Point.</returns>
        </member>
        <member name="M:Neo4j.Driver.OffsetTime.CompareTo(Neo4j.Driver.OffsetTime)">
            <summary>
            Compares the value of this instance to a specified <see cref="T:Neo4j.Driver.OffsetTime"/> value and returns an integer 
            that indicates whether this instance is earlier than, the same as, or later than the specified 
            DateTime value.
            </summary>
            <param name="other">The object to compare to the current instance.</param>
            <returns>A signed number indicating the relative values of this instance and the value parameter.</returns>
        </member>
        <member name="M:Neo4j.Driver.OffsetTime.CompareTo(System.Object)">
            <summary>
            Compares the value of this instance to a specified object which is expected to be a <see cref="T:Neo4j.Driver.OffsetTime"/>
            value, and returns an integer that indicates whether this instance is earlier than, the same as, 
            or later than the specified <see cref="T:Neo4j.Driver.OffsetTime"/> value.
            </summary>
            <param name="obj">The object to compare to the current instance.</param>
            <returns>A signed number indicating the relative values of this instance and the value parameter.</returns>
        </member>
        <member name="M:Neo4j.Driver.OffsetTime.op_LessThan(Neo4j.Driver.OffsetTime,Neo4j.Driver.OffsetTime)">
            <summary>
            Determines whether one specified <see cref="T:Neo4j.Driver.OffsetTime"/> is earlier than another specified 
            <see cref="T:Neo4j.Driver.OffsetTime"/>.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns><code>true</code> if one is earlier than another, otherwise <code>false</code>.</returns>
        </member>
        <member name="M:Neo4j.Driver.OffsetTime.op_GreaterThan(Neo4j.Driver.OffsetTime,Neo4j.Driver.OffsetTime)">
            <summary>
            Determines whether one specified <see cref="T:Neo4j.Driver.OffsetTime"/> is later than another specified 
            <see cref="T:Neo4j.Driver.OffsetTime"/>.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns><code>true</code> if one is later than another, otherwise <code>false</code>.</returns>
        </member>
        <member name="M:Neo4j.Driver.OffsetTime.op_LessThanOrEqual(Neo4j.Driver.OffsetTime,Neo4j.Driver.OffsetTime)">
            <summary>
            Determines whether one specified <see cref="T:Neo4j.Driver.OffsetTime"/> represents a duration that is the 
            same as or later than the other specified <see cref="T:Neo4j.Driver.OffsetTime"/> 
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns><code>true</code> if one is the same or later than another, otherwise <code>false</code>.</returns>
        </member>
        <member name="M:Neo4j.Driver.OffsetTime.op_GreaterThanOrEqual(Neo4j.Driver.OffsetTime,Neo4j.Driver.OffsetTime)">
            <summary>
            Determines whether one specified <see cref="T:Neo4j.Driver.OffsetTime"/> represents a duration that is the 
            same as or earlier than the other specified <see cref="T:Neo4j.Driver.OffsetTime"/> 
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns><code>true</code> if one is the same as or earlier than another, otherwise <code>false</code>.</returns>
        </member>
        <member name="T:Neo4j.Driver.Point">
            <summary>
            Represents a single three-dimensional point in a particular coordinate reference system.
            </summary>
        </member>
        <member name="M:Neo4j.Driver.Point.#ctor(System.Int32,System.Double,System.Double)">
            <summary>
            Initializes a new instance of <see cref="T:Neo4j.Driver.Point" /> structure with two dimensions
            </summary>
            <param name="srId"><see cref="P:Neo4j.Driver.Point.SrId" /></param>
            <param name="x"><see cref="P:Neo4j.Driver.Point.X" /></param>
            <param name="y"><see cref="P:Neo4j.Driver.Point.Y"/></param>
        </member>
        <member name="M:Neo4j.Driver.Point.#ctor(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of <see cref="T:Neo4j.Driver.Point" /> structure with three dimensions
            </summary>
            <param name="srId"><see cref="P:Neo4j.Driver.Point.SrId" /></param>
            <param name="x"><see cref="P:Neo4j.Driver.Point.X" /></param>
            <param name="y"><see cref="P:Neo4j.Driver.Point.Y"/></param>
            <param name="z"><see cref="P:Neo4j.Driver.Point.Z"/></param>
        </member>
        <member name="P:Neo4j.Driver.Point.SrId">
            <summary>
            Gets the coordinate reference system identifier.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.Point.X">
            <summary>
            Gets X coordinate of the point.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.Point.Y">
            <summary>
            Gets Y coordinate of the point.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.Point.Z">
            <summary>
            Gets Z coordinate of the point.
            </summary>
        </member>
        <member name="M:Neo4j.Driver.Point.ToString">
            <summary>
            Converts the value of the current <see cref="T:Neo4j.Driver.Point"/> object to its equivalent string representation.
            </summary>
            <returns>String representation of this Point.</returns>
        </member>
        <member name="M:Neo4j.Driver.Point.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Neo4j.Driver.Point.Equals(Neo4j.Driver.Point)">
            <summary>
            Returns a value indicating whether the value of this instance is equal to the 
            value of the specified <see cref="T:Neo4j.Driver.Point"/> instance. 
            </summary>
            <param name="other">The object to compare to this instance.</param>
            <returns><code>true</code> if the <code>value</code> parameter equals the value of 
            this instance; otherwise, <code>false</code></returns>
        </member>
        <member name="M:Neo4j.Driver.Point.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="obj">The object to compare to this instance.</param>
            <returns><code>true</code> if <code>value</code> is an instance of <see cref="T:Neo4j.Driver.Point"/> and 
            equals the value of this instance; otherwise, <code>false</code></returns>
        </member>
        <member name="T:Neo4j.Driver.TemporalValue">
            <summary>
            Base class for temporal values
            </summary>
        </member>
        <member name="M:Neo4j.Driver.TemporalValue.ConvertToDateTime">
            <summary>
            Converts this <see cref="T:Neo4j.Driver.TemporalValue"/> instance to a <see cref="T:System.DateTime"/> instance.
            </summary>
            <returns>A <see cref="T:System.DateTime"/> value</returns>
            <exception cref="T:System.InvalidCastException">If conversion is not possible</exception>
            <exception cref="T:Neo4j.Driver.ValueTruncationException">If conversion results in a truncation under ms precision</exception>
            <exception cref="T:System.OverflowException">If the value falls beyond valid range of target type</exception>
        </member>
        <member name="M:Neo4j.Driver.TemporalValue.ConvertToDateTimeOffset">
            <summary>
            Converts this <see cref="T:Neo4j.Driver.TemporalValue"/> instance to a <see cref="T:System.DateTimeOffset"/> instance.
            </summary>
            <returns>A <see cref="T:System.DateTime"/> value</returns>
            <exception cref="T:System.InvalidCastException">If conversion is not possible</exception>
            <exception cref="T:Neo4j.Driver.ValueTruncationException">If conversion results in a truncation under ms precision</exception>
            <exception cref="T:System.OverflowException">If the value falls beyond valid range of target type</exception>
        </member>
        <member name="M:Neo4j.Driver.TemporalValue.ConvertToTimeSpan">
            <summary>
            Converts this <see cref="T:Neo4j.Driver.TemporalValue"/> instance to a <see cref="T:System.TimeSpan"/> instance.
            </summary>
            <returns>A <see cref="T:System.DateTime"/> value</returns>
            <exception cref="T:System.InvalidCastException">If conversion is not possible</exception>
            <exception cref="T:Neo4j.Driver.ValueTruncationException">If conversion results in a truncation under ms precision</exception>
            <exception cref="T:System.OverflowException">If the value falls beyond valid range of target type</exception>
        </member>
        <member name="T:Neo4j.Driver.Zone">
            <summary>
            This abstract class represents a time zone that's usable by <see cref="T:Neo4j.Driver.ZonedDateTime"/> type. A time zone
            can be identified either by its offset (in seconds) from UTC or its IANA/Windows time zone identifiers. You can
            get corresponding instances of <see cref="T:Neo4j.Driver.Zone"/> by using its <see cref="M:Neo4j.Driver.Zone.Of(System.Int32)"/> or <see cref="M:Neo4j.Driver.Zone.Of(System.String)"/> 
            members.
            </summary>
        </member>
        <member name="M:Neo4j.Driver.Zone.Of(System.Int32)">
            <summary>
            Creates a <see cref="T:Neo4j.Driver.Zone"/> instance by using its offset from UTC
            </summary>
            <param name="offsetSeconds">The offset (in seconds) from UTC.</param>
            <returns>A <see cref="T:Neo4j.Driver.ZoneOffset"/> instance</returns>
        </member>
        <member name="M:Neo4j.Driver.Zone.Of(System.String)">
            <summary>
            Creates a <see cref="T:Neo4j.Driver.Zone"/> instance by using its time zone identifier.
            </summary>
            <param name="zoneId">The time zone identifier.</param>
            <returns>A <see cref="T:Neo4j.Driver.ZoneId"/> instance</returns>
        </member>
        <member name="T:Neo4j.Driver.ZonedDateTime">
            <summary>
            Represents a date time value with a time zone, specified as a UTC offset
            </summary>
        </member>
        <member name="F:Neo4j.Driver.ZonedDateTime.Comparer">
            <summary>
            Default comparer for <see cref="T:Neo4j.Driver.ZonedDateTime"/> values.
            </summary>
        </member>
        <member name="M:Neo4j.Driver.ZonedDateTime.#ctor(System.DateTimeOffset)">
            <summary>
            Initializes a new instance of <see cref="T:Neo4j.Driver.ZonedDateTime"/> from given <see cref="T:System.DateTimeOffset"/> value.
            </summary>
            <param name="dateTimeOffset"></param>
        </member>
        <member name="M:Neo4j.Driver.ZonedDateTime.#ctor(System.DateTime,System.TimeSpan)">
            <summary>
            Initializes a new instance of <see cref="T:Neo4j.Driver.ZonedDateTime"/> from given <see cref="P:Neo4j.Driver.ZonedDateTime.DateTime"/> value.
            </summary>
            <param name="dateTime"></param>
            <param name="offset"></param>
        </member>
        <member name="M:Neo4j.Driver.ZonedDateTime.#ctor(System.DateTime,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Neo4j.Driver.ZonedDateTime"/> from given <see cref="P:Neo4j.Driver.ZonedDateTime.DateTime"/> value.
            </summary>
            <param name="dateTime"></param>
            <param name="offsetSeconds"></param>
        </member>
        <member name="M:Neo4j.Driver.ZonedDateTime.#ctor(System.DateTime,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Neo4j.Driver.ZonedDateTime"/> from given <see cref="P:Neo4j.Driver.ZonedDateTime.DateTime"/> value.
            </summary>
            <param name="dateTime"></param>
            <param name="zoneId"></param>
        </member>
        <member name="M:Neo4j.Driver.ZonedDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Neo4j.Driver.Zone)">
            <summary>
            Initializes a new instance of <see cref="T:Neo4j.Driver.ZonedDateTime"/> from individual date time component values
            </summary>
            <param name="year"></param>
            <param name="month"></param>
            <param name="day"></param>
            <param name="hour"></param>
            <param name="minute"></param>
            <param name="second"></param>
            <param name="zone"></param>
        </member>
        <member name="M:Neo4j.Driver.ZonedDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Neo4j.Driver.Zone)">
            <summary>
            Initializes a new instance of <see cref="T:Neo4j.Driver.ZonedDateTime"/> from individual date time component values
            </summary>
            <param name="year"></param>
            <param name="month"></param>
            <param name="day"></param>
            <param name="hour"></param>
            <param name="minute"></param>
            <param name="second"></param>
            <param name="nanosecond"></param>
            <param name="zone"></param>
        </member>
        <member name="P:Neo4j.Driver.ZonedDateTime.Year">
            <summary>
            Gets the year component of this instance.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.ZonedDateTime.Month">
            <summary>
            Gets the month component of this instance.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.ZonedDateTime.Day">
            <summary>
            Gets the day of month component of this instance.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.ZonedDateTime.Hour">
            <summary>
            Gets the hour component of this instance.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.ZonedDateTime.Minute">
            <summary>
            Gets the minute component of this instance.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.ZonedDateTime.Second">
            <summary>
            Gets the second component of this instance.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.ZonedDateTime.Nanosecond">
            <summary>
            Gets the nanosecond component of this instance.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.ZonedDateTime.Zone">
            <summary>
            The time zone that this instance represents.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.ZonedDateTime.DateTime">
            <summary>
            Gets a <see cref="P:Neo4j.Driver.ZonedDateTime.DateTime"/> value that represents the date and time of this instance.
            </summary>
            <exception cref="T:Neo4j.Driver.ValueOverflowException">If the value cannot be represented with DateTime</exception>
            <exception cref="T:Neo4j.Driver.ValueTruncationException">If a truncation occurs during conversion</exception>
        </member>
        <member name="P:Neo4j.Driver.ZonedDateTime.OffsetSeconds">
            <summary>
            Returns the offset from UTC of this instance at the time it represents.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.ZonedDateTime.Offset">
            <summary>
            Gets a <see cref="T:System.TimeSpan"/> value that represents the offset of this instance.
            </summary>
        </member>
        <member name="M:Neo4j.Driver.ZonedDateTime.ToDateTimeOffset">
            <summary>
            Converts this instance to an equivalent <see cref="T:System.DateTimeOffset"/> value
            </summary>
            <returns>Equivalent <see cref="T:System.DateTimeOffset"/> value</returns>
            <exception cref="T:Neo4j.Driver.ValueOverflowException">If the value cannot be represented with DateTimeOffset</exception>
            <exception cref="T:Neo4j.Driver.ValueTruncationException">If a truncation occurs during conversion</exception>
        </member>
        <member name="M:Neo4j.Driver.ZonedDateTime.Equals(Neo4j.Driver.ZonedDateTime)">
            <summary>
            Returns a value indicating whether the value of this instance is equal to the 
            value of the specified <see cref="T:Neo4j.Driver.ZonedDateTime"/> instance. 
            </summary>
            <param name="other">The object to compare to this instance.</param>
            <returns><code>true</code> if the <code>value</code> parameter equals the value of 
            this instance; otherwise, <code>false</code></returns>
        </member>
        <member name="M:Neo4j.Driver.ZonedDateTime.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="obj">The object to compare to this instance.</param>
            <returns><code>true</code> if <code>value</code> is an instance of <see cref="T:Neo4j.Driver.ZonedDateTime"/> and 
            equals the value of this instance; otherwise, <code>false</code></returns>
        </member>
        <member name="M:Neo4j.Driver.ZonedDateTime.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Neo4j.Driver.ZonedDateTime.ToString">
            <summary>
            Converts the value of the current <see cref="T:Neo4j.Driver.ZonedDateTime"/> object to its equivalent string representation.
            </summary>
            <returns>String representation of this Point.</returns>
        </member>
        <member name="M:Neo4j.Driver.ZonedDateTime.CompareTo(Neo4j.Driver.ZonedDateTime)">
            <summary>
            Compares the value of this instance to a specified <see cref="T:Neo4j.Driver.ZonedDateTime"/> value and returns an integer 
            that indicates whether this instance is earlier than, the same as, or later than the specified 
            DateTime value.
            </summary>
            <param name="other">The object to compare to the current instance.</param>
            <returns>A signed number indicating the relative values of this instance and the value parameter.</returns>
        </member>
        <member name="M:Neo4j.Driver.ZonedDateTime.CompareTo(System.Object)">
            <summary>
            Compares the value of this instance to a specified object which is expected to be a <see cref="T:Neo4j.Driver.ZonedDateTime"/>
            value, and returns an integer that indicates whether this instance is earlier than, the same as, 
            or later than the specified <see cref="T:Neo4j.Driver.ZonedDateTime"/> value.
            </summary>
            <param name="obj">The object to compare to the current instance.</param>
            <returns>A signed number indicating the relative values of this instance and the value parameter.</returns>
        </member>
        <member name="M:Neo4j.Driver.ZonedDateTime.op_LessThan(Neo4j.Driver.ZonedDateTime,Neo4j.Driver.ZonedDateTime)">
            <summary>
            Determines whether one specified <see cref="T:Neo4j.Driver.ZonedDateTime"/> is earlier than another specified 
            <see cref="T:Neo4j.Driver.ZonedDateTime"/>.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns><code>true</code> if one is earlier than another, otherwise <code>false</code>.</returns>
        </member>
        <member name="M:Neo4j.Driver.ZonedDateTime.op_GreaterThan(Neo4j.Driver.ZonedDateTime,Neo4j.Driver.ZonedDateTime)">
            <summary>
            Determines whether one specified <see cref="T:Neo4j.Driver.ZonedDateTime"/> is later than another specified 
            <see cref="T:Neo4j.Driver.ZonedDateTime"/>.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns><code>true</code> if one is later than another, otherwise <code>false</code>.</returns>
        </member>
        <member name="M:Neo4j.Driver.ZonedDateTime.op_LessThanOrEqual(Neo4j.Driver.ZonedDateTime,Neo4j.Driver.ZonedDateTime)">
            <summary>
            Determines whether one specified <see cref="T:Neo4j.Driver.ZonedDateTime"/> represents a duration that is the 
            same as or later than the other specified <see cref="T:Neo4j.Driver.ZonedDateTime"/> 
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns><code>true</code> if one is the same as or later than another, otherwise <code>false</code>.</returns>
        </member>
        <member name="M:Neo4j.Driver.ZonedDateTime.op_GreaterThanOrEqual(Neo4j.Driver.ZonedDateTime,Neo4j.Driver.ZonedDateTime)">
            <summary>
            Determines whether one specified <see cref="T:Neo4j.Driver.ZonedDateTime"/> represents a duration that is the 
            same as or earlier than the other specified <see cref="T:Neo4j.Driver.ZonedDateTime"/> 
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns><code>true</code> if one is the same as or earlier than another, otherwise <code>false</code>.</returns>
        </member>
        <member name="M:Neo4j.Driver.ZonedDateTime.ConvertToDateTimeOffset">
            <inheritdoc cref="M:Neo4j.Driver.TemporalValue.ConvertToDateTimeOffset"/>
        </member>
        <member name="T:Neo4j.Driver.ZoneId">
            <summary>
            Represents a time zone specified by its time zone identifier.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.ZoneId.Id">
            <summary>The time zone identifier.</summary>
        </member>
        <member name="M:Neo4j.Driver.ZoneId.ToString">
            <summary>
            Converts the value of the current <see cref="T:Neo4j.Driver.ZoneId"/> object to its equivalent string representation.
            </summary>
            <returns>String representation of this Point.</returns>
        </member>
        <member name="M:Neo4j.Driver.ZoneId.Equals(Neo4j.Driver.ZoneId)">
            <summary>
            Returns a value indicating whether the value of this instance is equal to the 
            value of the specified <see cref="T:Neo4j.Driver.ZoneId"/> instance. 
            </summary>
            <param name="other">The object to compare to this instance.</param>
            <returns><code>true</code> if the <code>value</code> parameter equals the value of 
            this instance; otherwise, <code>false</code></returns>
        </member>
        <member name="M:Neo4j.Driver.ZoneId.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="obj">The object to compare to this instance.</param>
            <returns><code>true</code> if <code>value</code> is an instance of <see cref="T:Neo4j.Driver.ZoneId"/> and 
            equals the value of this instance; otherwise, <code>false</code></returns>
        </member>
        <member name="M:Neo4j.Driver.ZoneId.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="T:Neo4j.Driver.ZoneOffset">
            <summary>
            Represents a time zone specified by its offset from UTC.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.ZoneOffset.OffsetSeconds">
            <summary>The offset (in seconds) from UTC.</summary>
        </member>
        <member name="P:Neo4j.Driver.ZoneOffset.Offset">
            <summary>The offset from UTC as a <see cref="T:System.TimeSpan"/> instance.</summary>
        </member>
        <member name="M:Neo4j.Driver.ZoneOffset.ToString">
            <summary>
            Converts the value of the current <see cref="T:Neo4j.Driver.ZoneOffset"/> object to its equivalent string representation.
            </summary>
            <returns>String representation of this Point.</returns>
        </member>
        <member name="M:Neo4j.Driver.ZoneOffset.Equals(Neo4j.Driver.ZoneOffset)">
            <summary>
            Returns a value indicating whether the value of this instance is equal to the 
            value of the specified <see cref="T:Neo4j.Driver.ZoneOffset"/> instance. 
            </summary>
            <param name="other">The object to compare to this instance.</param>
            <returns><code>true</code> if the <code>value</code> parameter equals the value of 
            this instance; otherwise, <code>false</code></returns>
        </member>
        <member name="M:Neo4j.Driver.ZoneOffset.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="obj">The object to compare to this instance.</param>
            <returns><code>true</code> if <code>value</code> is an instance of <see cref="T:Neo4j.Driver.ZoneOffset"/> and 
            equals the value of this instance; otherwise, <code>false</code></returns>
        </member>
        <member name="M:Neo4j.Driver.ZoneOffset.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
    </members>
</doc>
